"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[8375],{10764:function(t,e,r){r.r(e),r.d(e,{Errors:function(){return et},STAGE:function(){return M},TREE:function(){return ec},WORKDIR:function(){return eu},abortMerge:function(){return ex},add:function(){return eP},addNote:function(){return eF},addRemote:function(){return eq},annotatedTag:function(){return eV},branch:function(){return eZ},checkout:function(){return eQ},clone:function(){return r_},commit:function(){return rv},currentBranch:function(){return rx},deleteBranch:function(){return rk},deleteRef:function(){return rS},deleteRemote:function(){return rR},deleteTag:function(){return rO},expandOid:function(){return rC},expandRef:function(){return rN},fastForward:function(){return rF},fetch:function(){return rG},findMergeBase:function(){return rq},findRoot:function(){return rV},getConfig:function(){return rK},getConfigAll:function(){return rY},getRemoteInfo:function(){return rJ},getRemoteInfo2:function(){return rQ},hashBlob:function(){return r1},indexPack:function(){return r8},init:function(){return r4},isDescendent:function(){return r3},isIgnored:function(){return r9},listBranches:function(){return r5},listFiles:function(){return ie},listNotes:function(){return ii},listRemotes:function(){return is},listServerRefs:function(){return ic},listTags:function(){return iu},log:function(){return ig},merge:function(){return iy},packObjects:function(){return iv},pull:function(){return ix},push:function(){return iI},readBlob:function(){return iA},readCommit:function(){return iU},readNote:function(){return iN},readObject:function(){return iB},readTag:function(){return iM},readTree:function(){return iT},remove:function(){return iH},removeNote:function(){return iW},renameBranch:function(){return iG},resetIndex:function(){return iL},resolveRef:function(){return iV},setConfig:function(){return iK},status:function(){return iZ},statusMatrix:function(){return iX},tag:function(){return iQ},updateIndex:function(){return i0},version:function(){return i1},walk:function(){return i2},writeBlob:function(){return i8},writeCommit:function(){return i6},writeObject:function(){return i3},writeRef:function(){return i9},writeTag:function(){return i7},writeTree:function(){return at}});var i=r(99758),a=r(18336),n=r(34606),s=r(99591),o=r(12352),l=r(15151),c=r(61990),f=r(99027),u=r(48764).Buffer;class d extends Error{constructor(t){super(t),this.caller=""}toJSON(){return{code:this.code,data:this.data,caller:this.caller,message:this.message,stack:this.stack}}fromJSON(t){let e=new d(t.message);return e.code=t.code,e.data=t.data,e.caller=t.caller,e.stack=t.stack,e}get isIsomorphicGitError(){return!0}}class h extends d{constructor(t){super(`Modifying the index is not possible because you have unmerged files: ${t.toString}. Fix them up in the work tree, and then use 'git add/rm as appropriate to mark resolution and make a commit.`),this.code=this.name=h.code,this.data={filepaths:t}}}h.code="UnmergedPathsError";class w extends d{constructor(t){super(`An internal error caused this command to fail. Please file a bug report at https://github.com/isomorphic-git/isomorphic-git/issues with this error message: ${t}`),this.code=this.name=w.code,this.data={message:t}}}w.code="InternalError";class m extends d{constructor(t){super(`The filepath "${t}" contains unsafe character sequences`),this.code=this.name=m.code,this.data={filepath:t}}}m.code="UnsafeFilepathError";class p{constructor(t){this.buffer=t,this._start=0}eof(){return this._start>=this.buffer.length}tell(){return this._start}seek(t){this._start=t}slice(t){let e=this.buffer.slice(this._start,this._start+t);return this._start+=t,e}toString(t,e){let r=this.buffer.toString(t,this._start,this._start+e);return this._start+=e,r}write(t,e,r){let i=this.buffer.write(t,this._start,e,r);return this._start+=e,i}copy(t,e,r){let i=t.copy(this.buffer,this._start,e,r);return this._start+=i,i}readUInt8(){let t=this.buffer.readUInt8(this._start);return this._start+=1,t}writeUInt8(t){let e=this.buffer.writeUInt8(t,this._start);return this._start+=1,e}readUInt16BE(){let t=this.buffer.readUInt16BE(this._start);return this._start+=2,t}writeUInt16BE(t){let e=this.buffer.writeUInt16BE(t,this._start);return this._start+=2,e}readUInt32BE(){let t=this.buffer.readUInt32BE(this._start);return this._start+=4,t}writeUInt32BE(t){let e=this.buffer.writeUInt32BE(t,this._start);return this._start+=4,e}}function g(t,e){return-(t<e)||+(t>e)}function y(t,e){return g(t.path,e.path)}function b(t){let e=t>0?t>>12:0;4!==e&&8!==e&&10!==e&&14!==e&&(e=8);let r=511&t;return r=73&r?493:420,8!==e&&(r=0),(e<<12)+r}function $(t,e,r,i){if(void 0!==t&&void 0!==e)return[t,e];void 0===r&&(r=i.valueOf());let a=Math.floor(r/1e3),n=(r-1e3*a)*1e6;return[a,n]}function _(t){let[e,r]=$(t.ctimeSeconds,t.ctimeNanoseconds,t.ctimeMs,t.ctime),[i,a]=$(t.mtimeSeconds,t.mtimeNanoseconds,t.mtimeMs,t.mtime);return{ctimeSeconds:e%4294967296,ctimeNanoseconds:r%4294967296,mtimeSeconds:i%4294967296,mtimeNanoseconds:a%4294967296,dev:t.dev%4294967296,ino:t.ino%4294967296,mode:b(t.mode%4294967296),uid:t.uid%4294967296,gid:t.gid%4294967296,size:t.size>-1?t.size%4294967296:0}}let v=null;async function x(t){return null===v&&(v=await k()),v?E(t):new a().update(t).digest("hex")}async function E(t){return function(t){let e="";for(let r of new Uint8Array(t))r<16&&(e+="0"),e+=r.toString(16);return e}(await crypto.subtle.digest("SHA-1",t))}async function k(){try{let t=await E(new Uint8Array([]));if("da39a3ee5e6b4b0d3255bfef95601890afd80709"===t)return!0}catch(t){}return!1}class S{constructor(t,e){this._dirty=!1,this._unmergedPaths=e||new Set,this._entries=t||new Map}_addEntry(t){if(0===t.flags.stage)t.stages=[t],this._entries.set(t.path,t),this._unmergedPaths.delete(t.path);else{let e=this._entries.get(t.path);e||(this._entries.set(t.path,t),e=t),e.stages[t.flags.stage]=t,this._unmergedPaths.add(t.path)}}static async from(t){if(u.isBuffer(t))return S.fromBuffer(t);if(null===t)return new S(null);throw new w("invalid type passed to GitIndex.from")}static async fromBuffer(t){if(0===t.length)throw new w("Index file is empty (.git/index)");let e=new S,r=new p(t),i=r.toString("utf8",4);if("DIRC"!==i)throw new w(`Invalid dircache magic file number: ${i}`);let a=await x(t.slice(0,-20)),n=t.slice(-20).toString("hex");if(n!==a)throw new w(`Invalid checksum in GitIndex buffer: expected ${n} but saw ${a}`);let s=r.readUInt32BE();if(2!==s)throw new w(`Unsupported dircache version: ${s}`);let o=r.readUInt32BE(),l=0;for(;!r.eof()&&l<o;){let i={};i.ctimeSeconds=r.readUInt32BE(),i.ctimeNanoseconds=r.readUInt32BE(),i.mtimeSeconds=r.readUInt32BE(),i.mtimeNanoseconds=r.readUInt32BE(),i.dev=r.readUInt32BE(),i.ino=r.readUInt32BE(),i.mode=r.readUInt32BE(),i.uid=r.readUInt32BE(),i.gid=r.readUInt32BE(),i.size=r.readUInt32BE(),i.oid=r.slice(20).toString("hex");let a=r.readUInt16BE();i.flags={assumeValid:!!(32768&a),extended:!!(16384&a),stage:(12288&a)>>12,nameLength:4095&a};let n=t.indexOf(0,r.tell()+1)-r.tell();if(n<1)throw new w(`Got a path length of: ${n}`);if(i.path=r.toString("utf8",n),i.path.includes("..\\")||i.path.includes("../"))throw new m(i.path);let s=8-(r.tell()-12)%8;for(0===s&&(s=8);s--;){let t=r.readUInt8();if(0!==t)throw new w(`Expected 1-8 null characters but got '${t}' after ${i.path}`);if(r.eof())throw new w("Unexpected end of file")}i.stages=[],e._addEntry(i),l++}return e}get unmergedPaths(){return[...this._unmergedPaths]}get entries(){return[...this._entries.values()].sort(y)}get entriesMap(){return this._entries}get entriesFlat(){return[...this.entries].flatMap(t=>t.stages.length>1?t.stages.filter(t=>t):t)}*[Symbol.iterator](){for(let t of this.entries)yield t}insert({filepath:t,stats:e,oid:r,stage:i=0}){e||(e={ctimeSeconds:0,ctimeNanoseconds:0,mtimeSeconds:0,mtimeNanoseconds:0,dev:0,ino:0,mode:0,uid:0,gid:0,size:0}),e=_(e);let a=u.from(t),n={ctimeSeconds:e.ctimeSeconds,ctimeNanoseconds:e.ctimeNanoseconds,mtimeSeconds:e.mtimeSeconds,mtimeNanoseconds:e.mtimeNanoseconds,dev:e.dev,ino:e.ino,mode:e.mode||33188,uid:e.uid,gid:e.gid,size:e.size,path:t,oid:r,flags:{assumeValid:!1,extended:!1,stage:i,nameLength:a.length<4095?a.length:4095},stages:[]};this._addEntry(n),this._dirty=!0}delete({filepath:t}){if(this._entries.has(t))this._entries.delete(t);else for(let e of this._entries.keys())e.startsWith(t+"/")&&this._entries.delete(e);this._unmergedPaths.has(t)&&this._unmergedPaths.delete(t),this._dirty=!0}clear(){this._entries.clear(),this._dirty=!0}has({filepath:t}){return this._entries.has(t)}render(){return this.entries.map(t=>`${t.mode.toString(8)} ${t.oid}    ${t.path}`).join("\n")}static async _entryToBuffer(t){let e=u.from(t.path),r=8*Math.ceil((62+e.length+1)/8),i=u.alloc(r),a=new p(i),n=_(t);return a.writeUInt32BE(n.ctimeSeconds),a.writeUInt32BE(n.ctimeNanoseconds),a.writeUInt32BE(n.mtimeSeconds),a.writeUInt32BE(n.mtimeNanoseconds),a.writeUInt32BE(n.dev),a.writeUInt32BE(n.ino),a.writeUInt32BE(n.mode),a.writeUInt32BE(n.uid),a.writeUInt32BE(n.gid),a.writeUInt32BE(n.size),a.write(t.oid,20,"hex"),a.writeUInt16BE(function(t){let e=t.flags;return e.extended=!1,e.nameLength=Math.min(u.from(t.path).length,4095),(e.assumeValid?32768:0)+(e.extended?16384:0)+((3&e.stage)<<12)+(4095&e.nameLength)}(t)),a.write(t.path,e.length,"utf8"),i}async toObject(){let t=u.alloc(12),e=new p(t);e.write("DIRC",4,"utf8"),e.writeUInt32BE(2),e.writeUInt32BE(this.entriesFlat.length);let r=[];for(let t of this.entries)if(r.push(S._entryToBuffer(t)),t.stages.length>1)for(let e of t.stages)e&&e!==t&&r.push(S._entryToBuffer(e));r=await Promise.all(r);let i=u.concat(r),a=u.concat([t,i]),n=await x(a);return u.concat([a,u.from(n,"hex")])}}function j(t,e){let r=_(t),i=_(e);return r.mode!==i.mode||r.mtimeSeconds!==i.mtimeSeconds||r.ctimeSeconds!==i.ctimeSeconds||r.uid!==i.uid||r.gid!==i.gid||r.ino!==i.ino||r.size!==i.size}let R=null,I=Symbol("IndexCache");async function O(t,e,r){let i=await t.lstat(e),a=await t.read(e),n=await S.from(a);r.map.set(e,n),r.stats.set(e,i)}async function P(t,e,r){let i=r.stats.get(e);if(void 0===i)return!0;let a=await t.lstat(e);return null!==i&&null!==a&&j(i,a)}class A{static async acquire({fs:t,gitdir:e,cache:r,allowUnmerged:a=!0},n){let s;r[I]||(r[I]={map:new Map,stats:new Map});let o=`${e}/index`;null===R&&(R=new i({maxPending:1/0}));let l=[];return await R.acquire(o,async()=>{await P(t,o,r[I])&&await O(t,o,r[I]);let e=r[I].map.get(o);if((l=e.unmergedPaths).length&&!a)throw new h(l);if(s=await n(e),e._dirty){let i=await e.toObject();await t.write(o,i),r[I].stats.set(o,await t.lstat(o)),e._dirty=!1}}),s}}function U(t){let e=Math.max(t.lastIndexOf("/"),t.lastIndexOf("\\"));return e>-1&&(t=t.slice(e+1)),t}function C(t){let e=Math.max(t.lastIndexOf("/"),t.lastIndexOf("\\"));return -1===e?".":0===e?"/":t.slice(0,e)}function N(t){let e=new Map,r=function(t){if(!e.has(t)){let i={type:"tree",fullpath:t,basename:U(t),metadata:{},children:[]};e.set(t,i),i.parent=r(C(t)),i.parent&&i.parent!==i&&i.parent.children.push(i)}return e.get(t)};for(let i of(r("."),t))!function(t,i){if(!e.has(t)){let a={type:"blob",fullpath:t,basename:U(t),metadata:i,parent:r(C(t)),children:[]};a.parent&&a.parent.children.push(a),e.set(t,a)}e.get(t)}(i.path,i);return e}class B{constructor({fs:t,gitdir:e,cache:r}){this.treePromise=A.acquire({fs:t,gitdir:e,cache:r},async function(t){return N(t.entries)});let i=this;this.ConstructEntry=class{constructor(t){this._fullpath=t,this._type=!1,this._mode=!1,this._stat=!1,this._oid=!1}async type(){return i.type(this)}async mode(){return i.mode(this)}async stat(){return i.stat(this)}async content(){return i.content(this)}async oid(){return i.oid(this)}}}async readdir(t){let e=t._fullpath,r=(await this.treePromise).get(e);if(!r||"blob"===r.type)return null;if("tree"!==r.type)throw Error(`ENOTDIR: not a directory, scandir '${e}'`);let i=r.children.map(t=>t.fullpath);return i.sort(g),i}async type(t){return!1===t._type&&await t.stat(),t._type}async mode(t){return!1===t._mode&&await t.stat(),t._mode}async stat(t){if(!1===t._stat){let e=(await this.treePromise).get(t._fullpath);if(!e)throw Error(`ENOENT: no such file or directory, lstat '${t._fullpath}'`);let r="tree"===e.type?{}:_(e.metadata);t._type="tree"===e.type?"tree":function(t){switch(t){case 16384:return"tree";case 33188:case 33261:case 40960:return"blob";case 57344:return"commit"}throw new w(`Unexpected GitTree entry mode: ${t.toString(8)}`)}(r.mode),t._mode=r.mode,"tree"===e.type?t._stat=void 0:t._stat=r}return t._stat}async content(t){}async oid(t){if(!1===t._oid){let e=(await this.treePromise).get(t._fullpath);t._oid=e.metadata.oid}return t._oid}}let D=Symbol("GitWalkSymbol");function M(){let t=Object.create(null);return Object.defineProperty(t,D,{value:function({fs:t,gitdir:e,cache:r}){return new B({fs:t,gitdir:e,cache:r})}}),Object.freeze(t),t}class T extends d{constructor(t){super(`Could not find ${t}.`),this.code=this.name=T.code,this.data={what:t}}}T.code="NotFoundError";class H extends d{constructor(t,e,r,i){super(`Object ${t} ${i?`at ${i}`:""}was anticipated to be a ${r} but it is a ${e}.`),this.code=this.name=H.code,this.data={oid:t,actual:e,expected:r,filepath:i}}}H.code="ObjectTypeError";class z extends d{constructor(t){super(`Expected a 40-char hex object id but saw "${t}".`),this.code=this.name=z.code,this.data={value:t}}}z.code="InvalidOidError";class W extends d{constructor(t){super(`Could not find a fetch refspec for remote "${t}". Make sure the config file has an entry like the following:
[remote "${t}"]
	fetch = +refs/heads/*:refs/remotes/origin/*
`),this.code=this.name=W.code,this.data={remote:t}}}W.code="NoRefspecError";class F{constructor(t){if(this.refs=new Map,this.parsedConfig=[],t){let e=null;this.parsedConfig=t.trim().split("\n").map(t=>{if(/^\s*#/.test(t))return{line:t,comment:!0};let r=t.indexOf(" ");if(t.startsWith("^")){let r=t.slice(1);return this.refs.set(e+"^{}",r),{line:t,ref:e,peeled:r}}{let i=t.slice(0,r);return e=t.slice(r+1),this.refs.set(e,i),{line:t,ref:e,oid:i}}})}return this}static from(t){return new F(t)}delete(t){this.parsedConfig=this.parsedConfig.filter(e=>e.ref!==t),this.refs.delete(t)}toString(){return this.parsedConfig.map(({line:t})=>t).join("\n")+"\n"}}class G{constructor({remotePath:t,localPath:e,force:r,matchPrefix:i}){Object.assign(this,{remotePath:t,localPath:e,force:r,matchPrefix:i})}static from(t){let[e,r,i,a,n]=t.match(/^(\+?)(.*?)(\*?):(.*?)(\*?)$/).slice(1),s="*"===i;if(s!==("*"===n))throw new w("Invalid refspec");return new G({remotePath:r,localPath:a,force:"+"===e,matchPrefix:s})}translate(t){if(this.matchPrefix){if(t.startsWith(this.remotePath))return this.localPath+t.replace(this.remotePath,"")}else if(t===this.remotePath)return this.localPath;return null}reverseTranslate(t){if(this.matchPrefix){if(t.startsWith(this.localPath))return this.remotePath+t.replace(this.localPath,"")}else if(t===this.localPath)return this.remotePath;return null}}class q{constructor(t=[]){this.rules=t}static from(t){let e=[];for(let r of t)e.push(G.from(r));return new q(e)}add(t){let e=G.from(t);this.rules.push(e)}translate(t){let e=[];for(let r of this.rules)for(let i of t){let t=r.translate(i);t&&e.push([i,t])}return e}translateOne(t){let e=null;for(let r of this.rules){let i=r.translate(t);i&&(e=i)}return e}localNamespaces(){return this.rules.filter(t=>t.matchPrefix).map(t=>t.localPath.replace(/\/$/,""))}}function L(t,e){let r=t.replace(/\^\{\}$/,""),i=e.replace(/\^\{\}$/,""),a=-(r<i)||+(r>i);return 0===a?t.endsWith("^{}")?1:-1:a}let V=new Map;function K(t){var e;let r=V.get(t);return r||(r="/."===(e=(e=t).split("/./").join("/").replace(/\/{2,}/g,"/"))?"/":"./"===e?".":(e.startsWith("./")&&(e=e.slice(2)),e.endsWith("/.")&&(e=e.slice(0,-2)),e.length>1&&e.endsWith("/")&&(e=e.slice(0,-1)),""===e)?".":e,V.set(t,r)),r}function Z(...t){return K(t.map(K).join("/"))}let Y=t=>{if("true"===(t=t.trim().toLowerCase())||"yes"===t||"on"===t)return!0;if("false"===t||"no"===t||"off"===t)return!1;throw Error(`Expected 'true', 'false', 'yes', 'no', 'on', or 'off', but got ${t}`)},J={core:{filemode:Y,bare:Y,logallrefupdates:Y,symlinks:Y,ignorecase:Y,bigFileThreshold:t=>{let e=parseInt(t=t.toLowerCase());return t.endsWith("k")&&(e*=1024),t.endsWith("m")&&(e*=1048576),t.endsWith("g")&&(e*=1073741824),e}}},X=/^\[([A-Za-z0-9-.]+)(?: "(.*)")?\]$/,Q=/^[A-Za-z0-9-.]+$/,tt=/^([A-Za-z][A-Za-z-]*)(?: *= *(.*))?$/,te=/^[A-Za-z][A-Za-z-]*$/,tr=/^(.*?)( *[#;].*)$/,ti=t=>{let e=X.exec(t);if(null!=e){let[t,r]=e.slice(1);return[t,r]}return null},ta=t=>{let e=tt.exec(t);if(null!=e){let[t,r="true"]=e.slice(1);return[t,to(tn(r))]}return null},tn=t=>{let e=tr.exec(t);if(null==e)return t;let[r,i]=e.slice(1);return ts(r)&&ts(i)?`${r}${i}`:r},ts=t=>(t.match(/(?:^|[^\\])"/g)||[]).length%2!=0,to=t=>t.split("").reduce((t,e,r,i)=>{let a='"'===e&&"\\"!==i[r-1],n="\\"===e&&'"'===i[r+1];return a||n?t:t+e},""),tl=t=>null!=t?t.toLowerCase():null,tc=(t,e,r)=>[tl(t),e,tl(r)].filter(t=>null!=t).join("."),tf=t=>{let e=t.split("."),r=e.shift(),i=e.pop(),a=e.length?e.join("."):void 0;return{section:r,subsection:a,name:i,path:tc(r,a,i),sectionPath:tc(r,a,null)}},tu=(t,e)=>t.reduce((t,r,i)=>e(r)?i:t,-1);class td{constructor(t){let e=null,r=null;this.parsedConfig=t.split("\n").map(t=>{let i=null,a=null,n=t.trim(),s=ti(n),o=null!=s;if(o)[e,r]=s;else{let t=ta(n);null!=t&&([i,a]=t)}let l=tc(e,r,i);return{line:t,isSection:o,section:e,subsection:r,name:i,value:a,path:l}})}static from(t){return new td(t)}async get(t,e=!1){let r=tf(t).path,i=this.parsedConfig.filter(t=>t.path===r).map(({section:t,name:e,value:r})=>{let i=J[t]&&J[t][e];return i?i(r):r});return e?i:i.pop()}async getall(t){return this.get(t,!0)}async getSubsections(t){return this.parsedConfig.filter(e=>e.section===t&&e.isSection).map(t=>t.subsection)}async deleteSection(t,e){this.parsedConfig=this.parsedConfig.filter(r=>!(r.section===t&&r.subsection===e))}async append(t,e){return this.set(t,e,!0)}async set(t,e,r=!1){let{section:i,subsection:a,name:n,path:s,sectionPath:o}=tf(t),l=tu(this.parsedConfig,t=>t.path===s);if(null==e)-1!==l&&this.parsedConfig.splice(l,1);else if(-1!==l){let t=Object.assign({},this.parsedConfig[l],{name:n,value:e,modified:!0});r?this.parsedConfig.splice(l+1,0,t):this.parsedConfig[l]=t}else{let t=this.parsedConfig.findIndex(t=>t.path===o),r={section:i,subsection:a,name:n,value:e,modified:!0,path:s};Q.test(i)&&te.test(n)&&(t>=0?this.parsedConfig.splice(t+1,0,r):this.parsedConfig.push({section:i,subsection:a,modified:!0,path:o},r))}}toString(){return this.parsedConfig.map(({line:t,section:e,subsection:r,name:i,value:a,modified:n=!1})=>n?null!=i&&null!=a?"string"==typeof a&&/[#;]/.test(a)?`	${i} = "${a}"`:`	${i} = ${a}`:null!=r?`[${e} "${r}"]`:`[${e}]`:t).join("\n")}}class th{static async get({fs:t,gitdir:e}){let r=await t.read(`${e}/config`,{encoding:"utf8"});return td.from(r)}static async save({fs:t,gitdir:e,config:r}){await t.write(`${e}/config`,r.toString(),{encoding:"utf8"})}}let tw=t=>[`${t}`,`refs/${t}`,`refs/tags/${t}`,`refs/heads/${t}`,`refs/remotes/${t}`,`refs/remotes/${t}/HEAD`],tm=["config","description","index","shallow","commondir"];class tp{static async updateRemoteRefs({fs:t,gitdir:e,remote:r,refs:i,symrefs:a,tags:n,refspecs:s,prune:o=!1,pruneTags:l=!1}){for(let t of i.values())if(!t.match(/[0-9a-f]{40}/))throw new z(t);let c=await th.get({fs:t,gitdir:e});if(!s){if(0===(s=await c.getall(`remote.${r}.fetch`)).length)throw new W(r);s.unshift(`+HEAD:refs/remotes/${r}/HEAD`)}let f=q.from(s),u=new Map;if(l){let r=await tp.listRefs({fs:t,gitdir:e,filepath:"refs/tags"});await tp.deleteRefs({fs:t,gitdir:e,refs:r.map(t=>`refs/tags/${t}`)})}if(n){for(let r of i.keys())if(r.startsWith("refs/tags")&&!r.endsWith("^{}")&&!await tp.exists({fs:t,gitdir:e,ref:r})){let t=i.get(r);u.set(r,t)}}for(let[t,e]of f.translate([...i.keys()])){let r=i.get(t);u.set(e,r)}for(let[t,e]of f.translate([...a.keys()])){let r=a.get(t),i=f.translateOne(r);i&&u.set(e,`ref: ${i}`)}let d=[];if(o){for(let r of f.localNamespaces())for(let i of(await tp.listRefs({fs:t,gitdir:e,filepath:r})).map(t=>`${r}/${t}`))u.has(i)||d.push(i);d.length>0&&await tp.deleteRefs({fs:t,gitdir:e,refs:d})}for(let[r,i]of u)await t.write(Z(e,r),`${i.trim()}
`,"utf8");return{pruned:d}}static async writeRef({fs:t,gitdir:e,ref:r,value:i}){if(!i.match(/[0-9a-f]{40}/))throw new z(i);await t.write(Z(e,r),`${i.trim()}
`,"utf8")}static async writeSymbolicRef({fs:t,gitdir:e,ref:r,value:i}){await t.write(Z(e,r),`ref: ${i.trim()}
`,"utf8")}static async deleteRef({fs:t,gitdir:e,ref:r}){return tp.deleteRefs({fs:t,gitdir:e,refs:[r]})}static async deleteRefs({fs:t,gitdir:e,refs:r}){await Promise.all(r.map(r=>t.rm(Z(e,r))));let i=await t.read(`${e}/packed-refs`,{encoding:"utf8"}),a=F.from(i),n=a.refs.size;for(let t of r)a.refs.has(t)&&a.delete(t);a.refs.size<n&&(i=a.toString(),await t.write(`${e}/packed-refs`,i,{encoding:"utf8"}))}static async resolve({fs:t,gitdir:e,ref:r,depth:i}){let a;if(void 0!==i&&-1==--i)return r;if(r.startsWith("ref: "))return r=r.slice(5),tp.resolve({fs:t,gitdir:e,ref:r,depth:i});if(40===r.length&&/[0-9a-f]{40}/.test(r))return r;let n=await tp.packedRefs({fs:t,gitdir:e});for(let s of tw(r).filter(t=>!tm.includes(t)))if(a=await t.read(`${e}/${s}`,{encoding:"utf8"})||n.get(s))return tp.resolve({fs:t,gitdir:e,ref:a.trim(),depth:i});throw new T(r)}static async exists({fs:t,gitdir:e,ref:r}){try{return await tp.expand({fs:t,gitdir:e,ref:r}),!0}catch(t){return!1}}static async expand({fs:t,gitdir:e,ref:r}){if(40===r.length&&/[0-9a-f]{40}/.test(r))return r;let i=await tp.packedRefs({fs:t,gitdir:e});for(let a of tw(r))if(await t.exists(`${e}/${a}`)||i.has(a))return a;throw new T(r)}static async expandAgainstMap({ref:t,map:e}){for(let r of tw(t))if(await e.has(r))return r;throw new T(t)}static resolveAgainstMap({ref:t,fullref:e=t,depth:r,map:i}){if(void 0!==r&&-1==--r)return{fullref:e,oid:t};if(t.startsWith("ref: "))return t=t.slice(5),tp.resolveAgainstMap({ref:t,fullref:e,depth:r,map:i});if(40===t.length&&/[0-9a-f]{40}/.test(t))return{fullref:e,oid:t};for(let e of tw(t)){let t=i.get(e);if(t)return tp.resolveAgainstMap({ref:t.trim(),fullref:e,depth:r,map:i})}throw new T(t)}static async packedRefs({fs:t,gitdir:e}){let r=await t.read(`${e}/packed-refs`,{encoding:"utf8"});return F.from(r).refs}static async listRefs({fs:t,gitdir:e,filepath:r}){let i=tp.packedRefs({fs:t,gitdir:e}),a=null;try{a=(a=await t.readdirDeep(`${e}/${r}`)).map(t=>t.replace(`${e}/${r}/`,""))}catch(t){a=[]}for(let t of(await i).keys())t.startsWith(r)&&(t=t.replace(r+"/",""),a.includes(t)||a.push(t));return a.sort(L),a}static async listBranches({fs:t,gitdir:e,remote:r}){return r?tp.listRefs({fs:t,gitdir:e,filepath:`refs/remotes/${r}`}):tp.listRefs({fs:t,gitdir:e,filepath:"refs/heads"})}static async listTags({fs:t,gitdir:e}){return(await tp.listRefs({fs:t,gitdir:e,filepath:"refs/tags"})).filter(t=>!t.endsWith("^{}"))}}function tg(t,e){return g(ty(t),ty(e))}function ty(t){return"040000"===t.mode?t.path+"/":t.path}function tb(t){switch(t){case"040000":return"tree";case"100644":case"100755":case"120000":return"blob";case"160000":return"commit"}throw new w(`Unexpected GitTree entry mode: ${t}`)}function t$(t){return!t.oid&&t.sha&&(t.oid=t.sha),t.mode=function(t){if("number"==typeof t&&(t=t.toString(8)),t.match(/^0?4.*/))return"040000";if(t.match(/^1006.*/))return"100644";if(t.match(/^1007.*/))return"100755";if(t.match(/^120.*/))return"120000";if(t.match(/^160.*/))return"160000";throw new w(`Could not understand file mode: ${t}`)}(t.mode),t.type||(t.type=tb(t.mode)),t}class t_{constructor(t){if(u.isBuffer(t))this._entries=function(t){let e=[],r=0;for(;r<t.length;){let i=t.indexOf(32,r);if(-1===i)throw new w(`GitTree: Error parsing buffer at byte location ${r}: Could not find the next space character.`);let a=t.indexOf(0,r);if(-1===a)throw new w(`GitTree: Error parsing buffer at byte location ${r}: Could not find the next null character.`);let n=t.slice(r,i).toString("utf8");"40000"===n&&(n="040000");let s=tb(n),o=t.slice(i+1,a).toString("utf8");if(o.includes("\\")||o.includes("/"))throw new m(o);let l=t.slice(a+1,a+21).toString("hex");r=a+21,e.push({mode:n,path:o,oid:l,type:s})}return e}(t);else if(Array.isArray(t))this._entries=t.map(t$);else throw new w("invalid type passed to GitTree constructor");this._entries.sort(y)}static from(t){return new t_(t)}render(){return this._entries.map(t=>`${t.mode} ${t.type} ${t.oid}    ${t.path}`).join("\n")}toObject(){let t=[...this._entries];return t.sort(tg),u.concat(t.map(t=>{let e=u.from(t.mode.replace(/^0/,"")),r=u.from(" "),i=u.from(t.path,"utf8"),a=u.from([0]),n=u.from(t.oid,"hex");return u.concat([e,r,i,a,n])}))}entries(){return this._entries}*[Symbol.iterator](){for(let t of this._entries)yield t}}class tv{static wrap({type:t,object:e}){return u.concat([u.from(`${t} ${e.byteLength.toString()}\0`),u.from(e)])}static unwrap(t){let e=t.indexOf(32),r=t.indexOf(0),i=t.slice(0,e).toString("utf8"),a=t.slice(e+1,r).toString("utf8"),n=t.length-(r+1);if(parseInt(a)!==n)throw new w(`Length mismatch: expected ${a} bytes but got ${n} instead.`);return{type:i,object:u.from(t.slice(r+1))}}}async function tx({fs:t,gitdir:e,oid:r}){let i=`objects/${r.slice(0,2)}/${r.slice(2)}`,a=await t.read(`${e}/${i}`);return a?{object:a,format:"deflated",source:i}:null}function tE(t){let e=0,r=0,i=null;do e|=(127&(i=t.readUInt8()))<<r,r+=7;while(128&i);return e}function tk(t,e,r){let i=0,a=0;for(;r--;)1&e&&(i|=t.readUInt8()<<a),e>>=1,a+=8;return i}function tS(t,e){let r=t.readUInt8();if(!(128&r))return t.slice(r);{let i=tk(t,15&r,4),a=tk(t,(112&r)>>4,3);return 0===a&&(a=65536),e.slice(i,i+a)}}function tj(t){let e;return t[Symbol.asyncIterator]?t[Symbol.asyncIterator]():t[Symbol.iterator]?t[Symbol.iterator]():t.next?t:(e=[t],{next:()=>Promise.resolve({done:0===e.length,value:e.pop()}),return:()=>(e=[],{}),[Symbol.asyncIterator](){return this}})}class tR{constructor(t){this.stream=tj(t),this.buffer=null,this.cursor=0,this.undoCursor=0,this.started=!1,this._ended=!1,this._discardedBytes=0}eof(){return this._ended&&this.cursor===this.buffer.length}tell(){return this._discardedBytes+this.cursor}async byte(){if(!this.eof()&&(this.started||await this._init(),this.cursor!==this.buffer.length||(await this._loadnext(),!this._ended)))return this._moveCursor(1),this.buffer[this.undoCursor]}async chunk(){if(!this.eof()&&(this.started||await this._init(),this.cursor!==this.buffer.length||(await this._loadnext(),!this._ended)))return this._moveCursor(this.buffer.length),this.buffer.slice(this.undoCursor,this.cursor)}async read(t){if(!this.eof())return this.started||await this._init(),this.cursor+t>this.buffer.length&&(this._trim(),await this._accumulate(t)),this._moveCursor(t),this.buffer.slice(this.undoCursor,this.cursor)}async skip(t){this.eof()||(this.started||await this._init(),this.cursor+t>this.buffer.length&&(this._trim(),await this._accumulate(t)),this._moveCursor(t))}async undo(){this.cursor=this.undoCursor}async _next(){this.started=!0;let{done:t,value:e}=await this.stream.next();return t&&(this._ended=!0,!e)?u.alloc(0):(e&&(e=u.from(e)),e)}_trim(){this.buffer=this.buffer.slice(this.undoCursor),this.cursor-=this.undoCursor,this._discardedBytes+=this.undoCursor,this.undoCursor=0}_moveCursor(t){this.undoCursor=this.cursor,this.cursor+=t,this.cursor>this.buffer.length&&(this.cursor=this.buffer.length)}async _accumulate(t){if(this._ended)return;let e=[this.buffer];for(;this.cursor+t>e.reduce((t,e)=>t+e.length,0);){let t=await this._next();if(this._ended)break;e.push(t)}this.buffer=u.concat(e)}async _loadnext(){this._discardedBytes+=this.buffer.length,this.undoCursor=0,this.cursor=0,this.buffer=await this._next()}async _init(){this.buffer=await this._next()}}async function tI(t,e){let r=new tR(t),i=await r.read(4);if("PACK"!==(i=i.toString("utf8")))throw new w(`Invalid PACK header '${i}'`);let a=await r.read(4);if(2!==(a=a.readUInt32BE(0)))throw new w(`Invalid packfile version: ${a}`);let n=await r.read(4);if(!((n=n.readUInt32BE(0))<1))for(;!r.eof()&&n--;){let t=r.tell(),{type:i,length:a,ofs:o,reference:l}=await tO(r),c=new s.Inflate;for(;!c.result;){let s=await r.chunk();if(!s)break;if(c.push(s,!1),c.err)throw new w(`Pako error: ${c.msg}`);if(c.result){if(c.result.length!==a)throw new w("Inflated object size is different from that stated in packfile.");await r.undo(),await r.read(s.length-c.strm.avail_in);let f=r.tell();await e({data:c.result,type:i,num:n,offset:t,end:f,reference:l,ofs:o})}}}}async function tO(t){let e,r,i=await t.byte(),a=i>>4&7,n=15&i;if(128&i){let e=4;do n|=(127&(i=await t.byte()))<<e,e+=7;while(128&i)}if(6===a){let a=0;e=0;let n=[];do e|=(127&(i=await t.byte()))<<a,a+=7,n.push(i);while(128&i);r=u.from(n)}return 7===a&&(r=await t.read(20)),{type:a,length:n,ofs:e,reference:r}}let tP=!1;async function tA(t){return null===tP&&(tP=function(){try{return new DecompressionStream("deflate"),!0}catch(t){}return!1}()),tP?tU(t):s.inflate(t)}async function tU(t){let e=new DecompressionStream("deflate"),r=new Blob([t]).stream().pipeThrough(e);return new Uint8Array(await new Response(r).arrayBuffer())}class tC{constructor(t){Object.assign(this,t),this.offsetCache={}}static async fromIdx({idx:t,getExternalRefDelta:e}){let r=new p(t);if("ff744f63"!==r.slice(4).toString("hex"))return;let i=r.readUInt32BE();if(2!==i)throw new w(`Unable to read version ${i} packfile IDX. (Only version 2 supported)`);if(t.byteLength>2147483648)throw new w("To keep implementation simple, I haven't implemented the layer 5 feature needed to support packfiles > 2GB in size.");r.seek(r.tell()+1020);let a=r.readUInt32BE(),n=[];for(let t=0;t<a;t++){let e=r.slice(20).toString("hex");n[t]=e}r.seek(r.tell()+4*a);let s=new Map;for(let t=0;t<a;t++)s.set(n[t],r.readUInt32BE());return new tC({hashes:n,crcs:{},offsets:s,packfileSha:r.slice(20).toString("hex"),getExternalRefDelta:e})}static async fromPack({pack:t,getExternalRefDelta:e,onProgress:r}){let i={1:"commit",2:"tree",3:"blob",4:"tag",6:"ofs-delta",7:"ref-delta"},a={},s=t.slice(-20).toString("hex"),o=[],l={},c=new Map,f=null,u=null;await tI([t],async({data:t,type:e,reference:n,offset:s,num:o})=>{null===f&&(f=o);let l=Math.floor((f-o)*100/f);l!==u&&r&&await r({phase:"Receiving objects",loaded:f-o,total:f}),u=l,["commit","tree","blob","tag"].includes(e=i[e])?a[s]={type:e,offset:s}:"ofs-delta"===e?a[s]={type:e,offset:s}:"ref-delta"===e&&(a[s]={type:e,offset:s})});let d=Object.keys(a).map(Number);for(let[e,r]of d.entries()){let i=e+1===d.length?t.byteLength-20:d[e+1],s=a[r],o=n.buf(t.slice(r,i))>>>0;s.end=i,s.crc=o}let h=new tC({pack:Promise.resolve(t),packfileSha:s,crcs:l,hashes:o,offsets:c,getExternalRefDelta:e});u=null;let w=0,m=[0,0,0,0,0,0,0,0,0,0,0,0];for(let t in a){t=Number(t);let e=Math.floor(100*w/f);e!==u&&r&&await r({phase:"Resolving deltas",loaded:w,total:f}),w++,u=e;let i=a[t];if(!i.oid)try{h.readDepth=0,h.externalReadDepth=0;let{type:e,object:r}=await h.readSlice({start:t});m[h.readDepth]+=1;let a=await x(tv.wrap({type:e,object:r}));i.oid=a,o.push(a),c.set(a,t),l[a]=i.crc}catch(t){continue}}return o.sort(),h}async toBuffer(){let t=[],e=(e,r)=>{t.push(u.from(e,r))};e("ff744f63","hex"),e("00000002","hex");let r=new p(u.alloc(1024));for(let t=0;t<256;t++){let e=0;for(let r of this.hashes)parseInt(r.slice(0,2),16)<=t&&e++;r.writeUInt32BE(e)}for(let i of(t.push(r.buffer),this.hashes))e(i,"hex");let i=new p(u.alloc(4*this.hashes.length));for(let t of this.hashes)i.writeUInt32BE(this.crcs[t]);t.push(i.buffer);let a=new p(u.alloc(4*this.hashes.length));for(let t of this.hashes)a.writeUInt32BE(this.offsets.get(t));t.push(a.buffer),e(this.packfileSha,"hex");let n=u.concat(t),s=await x(n),o=u.alloc(20);return o.write(s,"hex"),u.concat([n,o])}async load({pack:t}){this.pack=t}async unload(){this.pack=null}async read({oid:t}){if(!this.offsets.get(t)){if(this.getExternalRefDelta)return this.externalReadDepth++,this.getExternalRefDelta(t);throw new w(`Could not read object ${t} from packfile`)}let e=this.offsets.get(t);return this.readSlice({start:e})}async readSlice({start:t}){if(this.offsetCache[t])return Object.assign({},this.offsetCache[t]);if(this.readDepth++,!this.pack)throw new w("Tried to read from a GitPackIndex with no packfile loaded into memory");let e=(await this.pack).slice(t),r=new p(e),i=r.readUInt8(),a=112&i,n={16:"commit",32:"tree",48:"blob",64:"tag",96:"ofs_delta",112:"ref_delta"}[a];if(void 0===n)throw new w("Unrecognized type: 0b"+a.toString(2));let s=15&i,o=s;128&i&&(o=function(t,e){let r=e,i=4,a=null;do r|=(127&(a=t.readUInt8()))<<i,i+=7;while(128&a);return r}(r,s));let l=null,c=null;if("ofs_delta"===n){let e=t-function(t){let e=[],r=0,i=0;do{let a=127&(r=t.readUInt8());e.push(a),i=128&r}while(i);return e.reduce((t,e)=>t+1<<7|e,-1)}(r);({object:l,type:n}=await this.readSlice({start:e}))}if("ref_delta"===n){let t=r.slice(20).toString("hex");({object:l,type:n}=await this.read({oid:t}))}let f=e.slice(r.tell());if((c=u.from(await tA(f))).byteLength!==o)throw new w(`Packfile told us object would have length ${o} but it had length ${c.byteLength}`);return l&&(c=u.from(function(t,e){let r;let i=new p(t),a=tE(i);if(a!==e.byteLength)throw new w(`applyDelta expected source buffer to be ${a} bytes but the provided buffer was ${e.length} bytes`);let n=tE(i),s=tS(i,e);if(s.byteLength===n)r=s;else{let t=new p(r=u.alloc(n));for(t.copy(s);!i.eof();)t.copy(tS(i,e));let a=t.tell();if(n!==a)throw new w(`applyDelta expected target buffer to be ${n} bytes but the resulting buffer was ${a} bytes`)}return r}(c,l))),this.readDepth>3&&(this.offsetCache[t]={type:n,object:c}),{type:n,format:"content",object:c}}}let tN=Symbol("PackfileCache");async function tB({fs:t,filename:e,getExternalRefDelta:r,emitter:i,emitterPrefix:a}){let n=await t.read(e);return tC.fromIdx({idx:n,getExternalRefDelta:r})}function tD({fs:t,cache:e,filename:r,getExternalRefDelta:i,emitter:a,emitterPrefix:n}){e[tN]||(e[tN]=new Map);let s=e[tN].get(r);return s||(s=tB({fs:t,filename:r,getExternalRefDelta:i,emitter:a,emitterPrefix:n}),e[tN].set(r,s)),s}async function tM({fs:t,cache:e,gitdir:r,oid:i,format:a="content",getExternalRefDelta:n}){let s=await t.readdir(Z(r,"objects/pack"));for(let a of s=s.filter(t=>t.endsWith(".idx"))){let s=`${r}/objects/pack/${a}`,o=await tD({fs:t,cache:e,filename:s,getExternalRefDelta:n});if(o.error)throw new w(o.error);if(o.offsets.has(i)){if(!o.pack){let e=s.replace(/idx$/,"pack");o.pack=t.read(e)}let e=await o.read({oid:i,getExternalRefDelta:n});return e.format="content",e.source=`objects/pack/${a.replace(/idx$/,"pack")}`,e}}return null}async function tT({fs:t,cache:e,gitdir:r,oid:i,format:a="content"}){let n;if("4b825dc642cb6eb9a060e54bf8d69288fbee4904"===i&&(n={format:"wrapped",object:u.from(`tree 0\0`)}),n||(n=await tx({fs:t,gitdir:r,oid:i})),n||(n=await tM({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:i=>tT({fs:t,cache:e,gitdir:r,oid:i})})),!n)throw new T(i);if("deflated"===a)return n;if("deflated"===n.format&&(n.object=u.from(await tA(n.object)),n.format="wrapped"),"wrapped"===n.format){if("wrapped"===a&&"wrapped"===n.format)return n;let t=await x(n.object);if(t!==i)throw new w(`SHA check failed! Expected ${i}, computed ${t}`);let{object:e,type:r}=tv.unwrap(n.object);n.type=r,n.object=e,n.format="content"}if("content"===n.format)return"content"===a?n:void 0;throw new w(`invalid format "${n.format}"`)}class tH extends d{constructor(t,e,r=!0){super(`Failed to create ${t} at ${e} because it already exists.${r?` (Hint: use 'force: true' parameter to overwrite existing ${t}.)`:""}`),this.code=this.name=tH.code,this.data={noun:t,where:e,canForce:r}}}tH.code="AlreadyExistsError";class tz extends d{constructor(t,e,r){super(`Found multiple ${t} matching "${e}" (${r.join(", ")}). Use a longer abbreviation length to disambiguate them.`),this.code=this.name=tz.code,this.data={nouns:t,short:e,matches:r}}}tz.code="AmbiguousError";class tW extends d{constructor(t){super(`Your local changes to the following files would be overwritten by checkout: ${t.join(", ")}`),this.code=this.name=tW.code,this.data={filepaths:t}}}tW.code="CheckoutConflictError";class tF extends d{constructor(t,e){super(`Failed to checkout "${t}" because commit ${e} is not available locally. Do a git fetch to make the branch available locally.`),this.code=this.name=tF.code,this.data={ref:t,oid:e}}}tF.code="CommitNotFetchedError";class tG extends d{constructor(){super("Empty response from git server."),this.code=this.name=tG.code,this.data={}}}tG.code="EmptyServerResponseError";class tq extends d{constructor(){super("A simple fast-forward merge was not possible."),this.code=this.name=tq.code,this.data={}}}tq.code="FastForwardError";class tL extends d{constructor(t,e){super(`One or more branches were not updated: ${t}`),this.code=this.name=tL.code,this.data={prettyDetails:t,result:e}}}tL.code="GitPushError";class tV extends d{constructor(t,e,r){super(`HTTP Error: ${t} ${e}`),this.code=this.name=tV.code,this.data={statusCode:t,statusMessage:e,response:r}}}tV.code="HttpError";class tK extends d{constructor(t){let e="invalid filepath";"leading-slash"===t||"trailing-slash"===t?e='"filepath" parameter should not include leading or trailing directory separators because these can cause problems on some platforms.':"directory"===t&&(e='"filepath" should not be a directory.'),super(e),this.code=this.name=tK.code,this.data={reason:t}}}tK.code="InvalidFilepathError";class tZ extends d{constructor(t,e){super(`"${t}" would be an invalid git reference. (Hint: a valid alternative would be "${e}".)`),this.code=this.name=tZ.code,this.data={ref:t,suggestion:e}}}tZ.code="InvalidRefNameError";class tY extends d{constructor(t){super(`Maximum search depth of ${t} exceeded.`),this.code=this.name=tY.code,this.data={depth:t}}}tY.code="MaxDepthError";class tJ extends d{constructor(){super("Merges with conflicts are not supported yet."),this.code=this.name=tJ.code,this.data={}}}tJ.code="MergeNotSupportedError";class tX extends d{constructor(t,e,r,i){super(`Automatic merge failed with one or more merge conflicts in the following files: ${t.toString()}. Fix conflicts then commit the result.`),this.code=this.name=tX.code,this.data={filepaths:t,bothModified:e,deleteByUs:r,deleteByTheirs:i}}}tX.code="MergeConflictError";class tQ extends d{constructor(t){super(`No name was provided for ${t} in the argument or in the .git/config file.`),this.code=this.name=tQ.code,this.data={role:t}}}tQ.code="MissingNameError";class t0 extends d{constructor(t){super(`The function requires a "${t}" parameter but none was provided.`),this.code=this.name=t0.code,this.data={parameter:t}}}t0.code="MissingParameterError";class t1 extends d{constructor(t){super('There are multiple errors that were thrown by the method. Please refer to the "errors" property to see more'),this.code=this.name=t1.code,this.data={errors:t},this.errors=t}}t1.code="MultipleGitError";class t2 extends d{constructor(t,e){super(`Expected "${t}" but received "${e}".`),this.code=this.name=t2.code,this.data={expected:t,actual:e}}}t2.code="ParseError";class t8 extends d{constructor(t){let e="";"not-fast-forward"===t?e=" because it was not a simple fast-forward":"tag-exists"===t&&(e=" because tag already exists"),super(`Push rejected${e}. Use "force: true" to override.`),this.code=this.name=t8.code,this.data={reason:t}}}t8.code="PushRejectedError";class t4 extends d{constructor(t,e){super(`Remote does not support the "${t}" so the "${e}" parameter cannot be used.`),this.code=this.name=t4.code,this.data={capability:t,parameter:e}}}t4.code="RemoteCapabilityError";class t6 extends d{constructor(t,e){super(`Remote did not reply using the "smart" HTTP protocol. Expected "001e# service=git-upload-pack" but received: ${t}`),this.code=this.name=t6.code,this.data={preview:t,response:e}}}t6.code="SmartHttpError";class t3 extends d{constructor(t,e,r){super(`Git remote "${t}" uses an unrecognized transport protocol: "${e}"`),this.code=this.name=t3.code,this.data={url:t,transport:e,suggestion:r}}}t3.code="UnknownTransportError";class t9 extends d{constructor(t){super(`Cannot parse remote URL: "${t}"`),this.code=this.name=t9.code,this.data={url:t}}}t9.code="UrlParseError";class t5 extends d{constructor(){super("The operation was canceled."),this.code=this.name=t5.code,this.data={}}}t5.code="UserCanceledError";class t7 extends d{constructor(t){super(`Could not merge index: Entry for '${t}' is not up to date. Either reset the index entry to HEAD, or stage your unstaged chages.`),this.code=this.name=t7.code,this.data={filepath:t}}}t7.code="IndexResetError";var et=Object.freeze({__proto__:null,AlreadyExistsError:tH,AmbiguousError:tz,CheckoutConflictError:tW,CommitNotFetchedError:tF,EmptyServerResponseError:tG,FastForwardError:tq,GitPushError:tL,HttpError:tV,InternalError:w,InvalidFilepathError:tK,InvalidOidError:z,InvalidRefNameError:tZ,MaxDepthError:tY,MergeNotSupportedError:tJ,MergeConflictError:tX,MissingNameError:tQ,MissingParameterError:t0,MultipleGitError:t1,NoRefspecError:W,NotFoundError:T,ObjectTypeError:H,ParseError:t2,PushRejectedError:t8,RemoteCapabilityError:t4,SmartHttpError:t6,UnknownTransportError:t3,UnsafeFilepathError:m,UrlParseError:t9,UserCanceledError:t5,UnmergedPathsError:h,IndexResetError:t7});function ee({name:t,email:e,timestamp:r,timezoneOffset:i}){return i=function(t){var e,r;let i=Math.sign(r=0===(e=t)?e:-e)||(Object.is(r,-0)?-1:1),a=Math.floor((t=Math.abs(t))/60);t-=60*a;let n=String(a),s=String(t);return n.length<2&&(n="0"+n),s.length<2&&(s="0"+s),(-1===i?"-":"+")+n+s}(i),`${t} <${e}> ${r} ${i}`}function er(t){return t=(t=(t=t.replace(/\r/g,"")).replace(/^\n+/,"")).replace(/\n+$/,"")+"\n"}function ei(t){let[,e,r,i,a]=t.match(/^(.*) <(.*)> (.*) (.*)$/);return{name:e,email:r,timestamp:Number(i),timezoneOffset:function(t){var e;let[,r,i,a]=t.match(/(\+|-)(\d\d)(\d\d)/);return 0==(e=a=("+"===r?1:-1)*(60*Number(i)+Number(a)))?e:-e}(a)}}class ea{constructor(t){if("string"==typeof t)this._tag=t;else if(u.isBuffer(t))this._tag=t.toString("utf8");else if("object"==typeof t)this._tag=ea.render(t);else throw new w("invalid type passed to GitAnnotatedTag constructor")}static from(t){return new ea(t)}static render(t){return`object ${t.object}
type ${t.type}
tag ${t.tag}
tagger ${ee(t.tagger)}

${t.message}
${t.gpgsig?t.gpgsig:""}`}justHeaders(){return this._tag.slice(0,this._tag.indexOf("\n\n"))}message(){let t=this.withoutSignature();return t.slice(t.indexOf("\n\n")+2)}parse(){return Object.assign(this.headers(),{message:this.message(),gpgsig:this.gpgsig()})}render(){return this._tag}headers(){let t=this.justHeaders().split("\n"),e=[];for(let r of t)" "===r[0]?e[e.length-1]+="\n"+r.slice(1):e.push(r);let r={};for(let t of e){let e=t.slice(0,t.indexOf(" ")),i=t.slice(t.indexOf(" ")+1);Array.isArray(r[e])?r[e].push(i):r[e]=i}return r.tagger&&(r.tagger=ei(r.tagger)),r.committer&&(r.committer=ei(r.committer)),r}withoutSignature(){let t=er(this._tag);return -1===t.indexOf("\n-----BEGIN PGP SIGNATURE-----")?t:t.slice(0,t.lastIndexOf("\n-----BEGIN PGP SIGNATURE-----"))}gpgsig(){if(-1!==this._tag.indexOf("\n-----BEGIN PGP SIGNATURE-----"))return er(this._tag.slice(this._tag.indexOf("-----BEGIN PGP SIGNATURE-----"),this._tag.indexOf("-----END PGP SIGNATURE-----")+27))}payload(){return this.withoutSignature()+"\n"}toObject(){return u.from(this._tag,"utf8")}static async sign(t,e,r){let i=t.payload(),{signature:a}=await e({payload:i,secretKey:r}),n=i+(a=er(a));return ea.from(n)}}function en(t){return t.trim().split("\n").map(t=>" "+t).join("\n")+"\n"}class es{constructor(t){if("string"==typeof t)this._commit=t;else if(u.isBuffer(t))this._commit=t.toString("utf8");else if("object"==typeof t)this._commit=es.render(t);else throw new w("invalid type passed to GitCommit constructor")}static fromPayloadSignature({payload:t,signature:e}){let r=es.justHeaders(t),i=es.justMessage(t);return new es(er(r+"\ngpgsig"+en(e)+"\n"+i))}static from(t){return new es(t)}toObject(){return u.from(this._commit,"utf8")}headers(){return this.parseHeaders()}message(){return es.justMessage(this._commit)}parse(){return Object.assign({message:this.message()},this.headers())}static justMessage(t){return er(t.slice(t.indexOf("\n\n")+2))}static justHeaders(t){return t.slice(0,t.indexOf("\n\n"))}parseHeaders(){let t=es.justHeaders(this._commit).split("\n"),e=[];for(let r of t)" "===r[0]?e[e.length-1]+="\n"+r.slice(1):e.push(r);let r={parent:[]};for(let t of e){let e=t.slice(0,t.indexOf(" ")),i=t.slice(t.indexOf(" ")+1);Array.isArray(r[e])?r[e].push(i):r[e]=i}return r.author&&(r.author=ei(r.author)),r.committer&&(r.committer=ei(r.committer)),r}static renderHeaders(t){let e="";if(t.tree?e+=`tree ${t.tree}
`:e+=`tree 4b825dc642cb6eb9a060e54bf8d69288fbee4904
`,t.parent){if(void 0===t.parent.length)throw new w("commit 'parent' property should be an array");for(let r of t.parent)e+=`parent ${r}
`}let r=t.author;e+=`author ${ee(r)}
`;let i=t.committer||t.author;return e+=`committer ${ee(i)}
`,t.gpgsig&&(e+="gpgsig"+en(t.gpgsig)),e}static render(t){return es.renderHeaders(t)+"\n"+er(t.message)}render(){return this._commit}withoutSignature(){let t=er(this._commit);return -1===t.indexOf("\ngpgsig")?t:er(t.slice(0,t.indexOf("\ngpgsig"))+"\n"+t.slice(t.indexOf("-----END PGP SIGNATURE-----\n")+28))}isolateSignature(){return this._commit.slice(this._commit.indexOf("-----BEGIN PGP SIGNATURE-----"),this._commit.indexOf("-----END PGP SIGNATURE-----")+27).split("\n").map(t=>t.replace(/^ /,"")).join("\n")}static async sign(t,e,r){let i=t.withoutSignature(),a=es.justMessage(t._commit),{signature:n}=await e({payload:i,secretKey:r});n=er(n);let s=es.justHeaders(t._commit)+"\ngpgsig"+en(n)+"\n"+a;return es.from(s)}}async function eo({fs:t,cache:e,gitdir:r,oid:i}){if("4b825dc642cb6eb9a060e54bf8d69288fbee4904"===i)return{tree:t_.from([]),oid:i};let{type:a,object:n}=await tT({fs:t,cache:e,gitdir:r,oid:i});if("tag"===a)return eo({fs:t,cache:e,gitdir:r,oid:i=ea.from(n).parse().object});if("commit"===a)return eo({fs:t,cache:e,gitdir:r,oid:i=es.from(n).parse().tree});if("tree"!==a)throw new H(i,a,"tree");return{tree:t_.from(n),oid:i}}class el{constructor({fs:t,gitdir:e,ref:r,cache:i}){this.fs=t,this.cache=i,this.gitdir=e,this.mapPromise=(async()=>{let i;let a=new Map;try{i=await tp.resolve({fs:t,gitdir:e,ref:r})}catch(t){t instanceof T&&(i="4b825dc642cb6eb9a060e54bf8d69288fbee4904")}let n=await eo({fs:t,cache:this.cache,gitdir:e,oid:i});return n.type="tree",n.mode="40000",a.set(".",n),a})();let a=this;this.ConstructEntry=class{constructor(t){this._fullpath=t,this._type=!1,this._mode=!1,this._stat=!1,this._content=!1,this._oid=!1}async type(){return a.type(this)}async mode(){return a.mode(this)}async stat(){return a.stat(this)}async content(){return a.content(this)}async oid(){return a.oid(this)}}}async readdir(t){let e=t._fullpath,{fs:r,cache:i,gitdir:a}=this,n=await this.mapPromise,s=n.get(e);if(!s)throw Error(`No obj for ${e}`);let o=s.oid;if(!o)throw Error(`No oid for obj ${JSON.stringify(s)}`);if("tree"!==s.type)return null;let{type:l,object:c}=await tT({fs:r,cache:i,gitdir:a,oid:o});if(l!==s.type)throw new H(o,l,s.type);let f=t_.from(c);for(let t of f)n.set(Z(e,t.path),t);return f.entries().map(t=>Z(e,t.path))}async type(t){if(!1===t._type){let{type:e}=(await this.mapPromise).get(t._fullpath);t._type=e}return t._type}async mode(t){if(!1===t._mode){let{mode:e}=(await this.mapPromise).get(t._fullpath);t._mode=b(parseInt(e,8))}return t._mode}async stat(t){}async content(t){if(!1===t._content){let e=await this.mapPromise,{fs:r,cache:i,gitdir:a}=this,n=e.get(t._fullpath).oid,{type:s,object:o}=await tT({fs:r,cache:i,gitdir:a,oid:n});"blob"!==s?t._content=void 0:t._content=new Uint8Array(o)}return t._content}async oid(t){if(!1===t._oid){let e=(await this.mapPromise).get(t._fullpath);t._oid=e.oid}return t._oid}}function ec({ref:t="HEAD"}={}){let e=Object.create(null);return Object.defineProperty(e,D,{value:function({fs:e,gitdir:r,cache:i}){return new el({fs:e,gitdir:r,ref:t,cache:i})}}),Object.freeze(e),e}class ef{constructor({fs:t,dir:e,gitdir:r,cache:i}){this.fs=t,this.cache=i,this.dir=e,this.gitdir=r;let a=this;this.ConstructEntry=class{constructor(t){this._fullpath=t,this._type=!1,this._mode=!1,this._stat=!1,this._content=!1,this._oid=!1}async type(){return a.type(this)}async mode(){return a.mode(this)}async stat(){return a.stat(this)}async content(){return a.content(this)}async oid(){return a.oid(this)}}}async readdir(t){let e=t._fullpath,{fs:r,dir:i}=this,a=await r.readdir(Z(i,e));return null===a?null:a.map(t=>Z(e,t))}async type(t){return!1===t._type&&await t.stat(),t._type}async mode(t){return!1===t._mode&&await t.stat(),t._mode}async stat(t){if(!1===t._stat){let{fs:e,dir:r}=this,i=await e.lstat(`${r}/${t._fullpath}`);if(!i)throw Error(`ENOENT: no such file or directory, lstat '${t._fullpath}'`);let a=i.isDirectory()?"tree":"blob";"blob"!==a||i.isFile()||i.isSymbolicLink()||(a="special"),t._type=a,i=_(i),t._mode=i.mode,-1===i.size&&t._actualSize&&(i.size=t._actualSize),t._stat=i}return t._stat}async content(t){if(!1===t._content){let{fs:e,dir:r}=this;if(await t.type()==="tree")t._content=void 0;else{let i=await e.read(`${r}/${t._fullpath}`);t._actualSize=i.length,t._stat&&-1===t._stat.size&&(t._stat.size=t._actualSize),t._content=new Uint8Array(i)}}return t._content}async oid(t){if(!1===t._oid){let e;let{fs:r,gitdir:i,cache:a}=this;await A.acquire({fs:r,gitdir:i,cache:a},async function(r){let i=r.entriesMap.get(t._fullpath),a=await t.stat();!i||j(a,i)?void 0===await t.content()?e=void 0:(e=await x(tv.wrap({type:"blob",object:await t.content()})),i&&e===i.oid&&a.mode===i.mode&&j(a,i)&&r.insert({filepath:t._fullpath,stats:a,oid:e})):e=i.oid}),t._oid=e}return t._oid}}function eu(){let t=Object.create(null);return Object.defineProperty(t,D,{value:function({fs:t,dir:e,gitdir:r,cache:i}){return new ef({fs:t,dir:e,gitdir:r,cache:i})}}),Object.freeze(t),t}let ed=void 0===Array.prototype.flat?t=>t.reduce((t,e)=>t.concat(e),[]):t=>t.flat();class eh{constructor(){this.value=null}consider(t){null!=t&&(null===this.value?this.value=t:t<this.value&&(this.value=t))}reset(){this.value=null}}async function ew({fs:t,cache:e,dir:r,gitdir:i,trees:a,map:n=async(t,e)=>e,reduce:s=async(t,e)=>{let r=ed(e);return void 0!==t&&r.unshift(t),r},iterate:o=(t,e)=>Promise.all([...e].map(t))}){let l=a.map(a=>a[D]({fs:t,dir:r,gitdir:i,cache:e})),c=Array(l.length).fill("."),f=Array.from({length:l.length-0},(t,e)=>0+e),u=async t=>{f.map(e=>{t[e]=t[e]&&new l[e].ConstructEntry(t[e])});let e=(await Promise.all(f.map(e=>t[e]?l[e].readdir(t[e]):[]))).map(t=>null===t?[]:t).map(t=>t[Symbol.iterator]());return{entries:t,children:function*(t){let e;let r=new eh,i=[],a=t.length;for(let e=0;e<a;e++)i[e]=t[e].next().value,void 0!==i[e]&&r.consider(i[e]);if(null!==r.value)for(;;){let n=[];e=r.value,r.reset();for(let s=0;s<a;s++)void 0!==i[s]&&i[s]===e?(n[s]=i[s],i[s]=t[s].next().value):n[s]=null,void 0!==i[s]&&r.consider(i[s]);if(yield n,null===r.value)return}}(e)}},d=async t=>{let{entries:e,children:r}=await u(t),i=e.find(t=>t&&t._fullpath)._fullpath,a=await n(i,e);if(null!==a){let t=await o(d,r);return s(a,t=t.filter(t=>void 0!==t))}};return d(c)}async function em(t,e){let r=await t.readdir(e);null==r?await t.rm(e):r.length?await Promise.all(r.map(r=>{let i=Z(e,r);return t.lstat(i).then(e=>{if(e)return e.isDirectory()?em(t,i):t.rm(i)})})).then(()=>t.rmdir(e)):await t.rmdir(e)}function ep(t){return"function"==typeof t}function eg(t){var e,r;return(r=e=(t=>{try{return t.readFile().catch(t=>t)}catch(t){return t}})(t))&&"object"==typeof r&&ep(e.then)&&ep(e.catch)}let ey=["readFile","writeFile","mkdir","rmdir","unlink","stat","lstat","readdir","readlink","symlink"];function eb(t,e){if(eg(e))for(let r of ey)t[`_${r}`]=e[r].bind(e);else for(let r of ey)t[`_${r}`]=o(e[r].bind(e));eg(e)?e.rm?t._rm=e.rm.bind(e):e.rmdir.length>1?t._rm=e.rmdir.bind(e):t._rm=em.bind(null,t):e.rm?t._rm=o(e.rm.bind(e)):e.rmdir.length>2?t._rm=o(e.rmdir.bind(e)):t._rm=em.bind(null,t)}class e${constructor(t){if(void 0!==t._original_unwrapped_fs)return t;let e=Object.getOwnPropertyDescriptor(t,"promises");e&&e.enumerable?eb(this,t.promises):eb(this,t),this._original_unwrapped_fs=t}async exists(t,e={}){try{return await this._stat(t),!0}catch(t){if("ENOENT"===t.code||"ENOTDIR"===t.code)return!1;throw console.log('Unhandled error in "FileSystem.exists()" function',t),t}}async read(t,e={}){try{let r=await this._readFile(t,e);return"string"!=typeof r&&(r=u.from(r)),r}catch(t){return null}}async write(t,e,r={}){try{await this._writeFile(t,e,r);return}catch(i){await this.mkdir(C(t)),await this._writeFile(t,e,r)}}async mkdir(t,e=!1){try{await this._mkdir(t);return}catch(r){if(null===r||"EEXIST"===r.code)return;if(e)throw r;if("ENOENT"===r.code){let e=C(t);if("."===e||"/"===e||e===t)throw r;await this.mkdir(e),await this.mkdir(t,!0)}}}async rm(t){try{await this._unlink(t)}catch(t){if("ENOENT"!==t.code)throw t}}async rmdir(t,e){try{e&&e.recursive?await this._rm(t,e):await this._rmdir(t)}catch(t){if("ENOENT"!==t.code)throw t}}async readdir(t){try{let e=await this._readdir(t);return e.sort(g),e}catch(t){if("ENOTDIR"===t.code)return null;return[]}}async readdirDeep(t){let e=await this._readdir(t);return(await Promise.all(e.map(async e=>{let r=t+"/"+e;return(await this._stat(r)).isDirectory()?this.readdirDeep(r):r}))).reduce((t,e)=>t.concat(e),[])}async lstat(t){try{return await this._lstat(t)}catch(t){if("ENOENT"===t.code)return null;throw t}}async readlink(t,e={encoding:"buffer"}){try{let r=await this._readlink(t,e);return u.isBuffer(r)?r:u.from(r)}catch(t){if("ENOENT"===t.code)return null;throw t}}async writelink(t,e){return this._symlink(e.toString("utf8"),t)}}function e_(t,e){if(void 0===e)throw new t0(t)}async function ev(t,e){return(!!t||!!e)&&(!!t&&!e||!t&&!!e||(await t.type()!=="tree"||await e.type()!=="tree")&&(await t.type()!==await e.type()||await t.mode()!==await e.mode()||await t.oid()!==await e.oid()))}async function ex({fs:t,dir:e,gitdir:r=Z(e,".git"),commit:i="HEAD",cache:a={}}){try{e_("fs",t),e_("dir",e),e_("gitdir",r);let n=new e$(t),s=[ec({ref:i}),eu(),M()],o=[];await A.acquire({fs:n,gitdir:r,cache:a},async function(t){o=t.unmergedPaths});let l=await ew({fs:n,cache:a,dir:e,gitdir:r,trees:s,map:async function(t,[e,r,i]){let a=!await ev(r,i),n=o.includes(t),s=!await ev(i,e);if(a||n)return e?{path:t,mode:await e.mode(),oid:await e.oid(),type:await e.type(),content:await e.content()}:void 0;if(s)return!1;throw new t7(t)}});await A.acquire({fs:n,gitdir:r,cache:a},async function(t){for(let r of l)if(!1!==r){if(!r){await n.rmdir(`${e}/${r.path}`,{recursive:!0}),t.delete({filepath:r.path});continue}if("blob"===r.type){let i=new TextDecoder().decode(r.content);await n.write(`${e}/${r.path}`,i,{mode:r.mode}),t.insert({filepath:r.path,oid:r.oid,stage:0})}}})}catch(t){throw t.caller="git.abortMerge",t}}class eE{static async isIgnored({fs:t,dir:e,gitdir:r=Z(e,".git"),filepath:i}){if(".git"===U(i))return!0;if("."===i)return!1;let a="",n=Z(r,"info","exclude");await t.exists(n)&&(a=await t.read(n,"utf8"));let s=[{gitignore:Z(e,".gitignore"),filepath:i}],o=i.split("/").filter(Boolean);for(let t=1;t<o.length;t++){let r=o.slice(0,t).join("/"),i=o.slice(t).join("/");s.push({gitignore:Z(e,r,".gitignore"),filepath:i})}let c=!1;for(let e of s){let r;try{r=await t.read(e.gitignore,"utf8")}catch(t){if("NOENT"===t.code)continue}let i=l().add(a);i.add(r);let n=C(e.filepath);if("."!==n&&i.ignores(n))return!0;c=c?!i.test(e.filepath).unignored:i.test(e.filepath).ignored}return c}}async function ek({fs:t,gitdir:e,object:r,format:i,oid:a}){if("deflated"!==i)throw new w("GitObjectStoreLoose expects objects to write to be in deflated format");let n=`objects/${a.slice(0,2)}/${a.slice(2)}`,s=`${e}/${n}`;await t.exists(s)||await t.write(s,r)}let eS=null;async function ej(t){return null===eS&&(eS=function(){try{let t=new CompressionStream("deflate");if(new Blob([]).stream(),t)return!0}catch(t){}return!1}()),eS?eR(t):s.deflate(t)}async function eR(t){let e=new CompressionStream("deflate"),r=new Blob([t]).stream().pipeThrough(e);return new Uint8Array(await new Response(r).arrayBuffer())}async function eI({fs:t,gitdir:e,type:r,object:i,format:a="content",oid:n,dryRun:s=!1}){return"deflated"!==a&&("wrapped"!==a&&(i=tv.wrap({type:r,object:i})),n=await x(i),i=u.from(await ej(i))),s||await ek({fs:t,gitdir:e,object:i,format:"deflated",oid:n}),n}function eO(t){let e;for(;~(e=t.indexOf(92));)t[e]=47;return t}async function eP({fs:t,dir:e,gitdir:r=Z(e,".git"),filepath:i,cache:a={},force:n=!1,parallel:s=!0}){try{e_("fs",t),e_("dir",e),e_("gitdir",r),e_("filepath",i);let o=new e$(t);await A.acquire({fs:o,gitdir:r,cache:a},async t=>eA({dir:e,gitdir:r,fs:o,filepath:i,index:t,force:n,parallel:s}))}catch(t){throw t.caller="git.add",t}}async function eA({dir:t,gitdir:e,fs:r,filepath:i,index:a,force:n,parallel:s}){let o=(i=Array.isArray(i)?i:[i]).map(async i=>{if(!n&&await eE.isIgnored({fs:r,dir:t,gitdir:e,filepath:i}))return;let o=await r.lstat(Z(t,i));if(!o)throw new T(i);if(o.isDirectory()){let o=await r.readdir(Z(t,i));if(s){let l=o.map(o=>eA({dir:t,gitdir:e,fs:r,filepath:[Z(i,o)],index:a,force:n,parallel:s}));await Promise.all(l)}else for(let l of o)await eA({dir:t,gitdir:e,fs:r,filepath:[Z(i,l)],index:a,force:n,parallel:s})}else{let n=o.isSymbolicLink()?await r.readlink(Z(t,i)).then(eO):await r.read(Z(t,i));if(null===n)throw new T(i);let s=await eI({fs:r,gitdir:e,type:"blob",object:n});a.insert({filepath:i,stats:o,oid:s})}}),l=await Promise.allSettled(o),c=l.filter(t=>"rejected"===t.status).map(t=>t.reason);if(c.length>1)throw new t1(c);if(1===c.length)throw c[0];return l.filter(t=>"fulfilled"===t.status&&t.value).map(t=>t.value)}async function eU({fs:t,cache:e,onSign:r,gitdir:i,message:a,author:n,committer:s,signingKey:o,dryRun:l=!1,noUpdateBranch:c=!1,ref:f,parent:u,tree:d}){return f||(f=await tp.resolve({fs:t,gitdir:i,ref:"HEAD",depth:2})),A.acquire({fs:t,gitdir:i,cache:e,allowUnmerged:!1},async function(e){let h=N(e.entries).get(".");if(d||(d=await eC({fs:t,gitdir:i,inode:h,dryRun:l})),u)u=await Promise.all(u.map(e=>tp.resolve({fs:t,gitdir:i,ref:e})));else try{u=[await tp.resolve({fs:t,gitdir:i,ref:f})]}catch(t){u=[]}let w=es.from({tree:d,parent:u,author:n,committer:s,message:a});o&&(w=await es.sign(w,r,o));let m=await eI({fs:t,gitdir:i,type:"commit",object:w.toObject(),dryRun:l});return c||l||await tp.writeRef({fs:t,gitdir:i,ref:f,value:m}),m})}async function eC({fs:t,gitdir:e,inode:r,dryRun:i}){let a=r.children;for(let r of a)"tree"===r.type&&(r.metadata.mode="040000",r.metadata.oid=await eC({fs:t,gitdir:e,inode:r,dryRun:i}));let n=a.map(t=>({mode:t.metadata.mode,path:t.basename,oid:t.metadata.oid,type:t.type})),s=t_.from(n);return await eI({fs:t,gitdir:e,type:"tree",object:s.toObject(),dryRun:i})}async function eN({fs:t,cache:e,gitdir:r,oid:i,filepath:a}){if(a.startsWith("/"))throw new tK("leading-slash");if(a.endsWith("/"))throw new tK("trailing-slash");let n=i,s=await eo({fs:t,cache:e,gitdir:r,oid:i}),o=s.tree;if(""===a)i=s.oid;else{let s=a.split("/");i=await eB({fs:t,cache:e,gitdir:r,tree:o,pathArray:s,oid:n,filepath:a})}return i}async function eB({fs:t,cache:e,gitdir:r,tree:i,pathArray:a,oid:n,filepath:s}){let o=a.shift();for(let l of i)if(l.path===o){if(0===a.length)return l.oid;{let{type:o,object:c}=await tT({fs:t,cache:e,gitdir:r,oid:l.oid});if("tree"!==o)throw new H(n,o,"tree",s);return eB({fs:t,cache:e,gitdir:r,tree:i=t_.from(c),pathArray:a,oid:n,filepath:s})}}throw new T(`file or directory found at "${n}:${s}"`)}async function eD({fs:t,cache:e,gitdir:r,oid:i,filepath:a}){void 0!==a&&(i=await eN({fs:t,cache:e,gitdir:r,oid:i,filepath:a}));let{tree:n,oid:s}=await eo({fs:t,cache:e,gitdir:r,oid:i});return{oid:s,tree:n.entries()}}async function eM({fs:t,gitdir:e,tree:r}){let i=t_.from(r).toObject();return await eI({fs:t,gitdir:e,type:"tree",object:i,format:"content"})}async function eT({fs:t,cache:e,onSign:r,gitdir:i,ref:a,oid:n,note:s,force:o,author:l,committer:c,signingKey:f}){let d;try{d=await tp.resolve({gitdir:i,fs:t,ref:a})}catch(t){if(!(t instanceof T))throw t}let h=(await eD({fs:t,cache:e,gitdir:i,oid:d||"4b825dc642cb6eb9a060e54bf8d69288fbee4904"})).tree;if(o)h=h.filter(t=>t.path!==n);else for(let t of h)if(t.path===n)throw new tH("note",n);"string"==typeof s&&(s=u.from(s,"utf8"));let w=await eI({fs:t,gitdir:i,type:"blob",object:s,format:"content"});h.push({mode:"100644",path:n,oid:w,type:"blob"});let m=await eM({fs:t,gitdir:i,tree:h});return await eU({fs:t,cache:e,onSign:r,gitdir:i,ref:a,tree:m,parent:d&&[d],message:`Note added by 'isomorphic-git addNote'
`,author:l,committer:c,signingKey:f})}async function eH({fs:t,gitdir:e,path:r}){return(await th.get({fs:t,gitdir:e})).get(r)}async function ez({fs:t,gitdir:e,author:r={}}){let{name:i,email:a,timestamp:n,timezoneOffset:s}=r;if(i=i||await eH({fs:t,gitdir:e,path:"user.name"}),a=a||await eH({fs:t,gitdir:e,path:"user.email"})||"",void 0!==i)return n=null!=n?n:Math.floor(Date.now()/1e3),s=null!=s?s:new Date(1e3*n).getTimezoneOffset(),{name:i,email:a,timestamp:n,timezoneOffset:s}}async function eW({fs:t,gitdir:e,author:r,committer:i}){return i=Object.assign({},i||r),r&&(i.timestamp=i.timestamp||r.timestamp,i.timezoneOffset=i.timezoneOffset||r.timezoneOffset),i=await ez({fs:t,gitdir:e,author:i})}async function eF({fs:t,onSign:e,dir:r,gitdir:i=Z(r,".git"),ref:a="refs/notes/commits",oid:n,note:s,force:o,author:l,committer:c,signingKey:f,cache:u={}}){try{e_("fs",t),e_("gitdir",i),e_("oid",n),e_("note",s),f&&e_("onSign",e);let r=new e$(t),d=await ez({fs:r,gitdir:i,author:l});if(!d)throw new tQ("author");let h=await eW({fs:r,gitdir:i,author:d,committer:c});if(!h)throw new tQ("committer");return await eT({fs:new e$(r),cache:u,onSign:e,gitdir:i,ref:a,oid:n,note:s,force:o,author:d,committer:h,signingKey:f})}catch(t){throw t.caller="git.addNote",t}}async function eG({fs:t,gitdir:e,remote:r,url:i,force:a}){if(r!==c.clean(r))throw new tZ(r,c.clean(r));let n=await th.get({fs:t,gitdir:e});if(!a&&(await n.getSubsections("remote")).includes(r)&&i!==await n.get(`remote.${r}.url`))throw new tH("remote",r);await n.set(`remote.${r}.url`,i),await n.set(`remote.${r}.fetch`,`+refs/heads/*:refs/remotes/${r}/*`),await th.save({fs:t,gitdir:e,config:n})}async function eq({fs:t,dir:e,gitdir:r=Z(e,".git"),remote:i,url:a,force:n=!1}){try{return e_("fs",t),e_("gitdir",r),e_("remote",i),e_("url",a),await eG({fs:new e$(t),gitdir:r,remote:i,url:a,force:n})}catch(t){throw t.caller="git.addRemote",t}}async function eL({fs:t,cache:e,onSign:r,gitdir:i,ref:a,tagger:n,message:s=a,gpgsig:o,object:l,signingKey:c,force:f=!1}){if(a=a.startsWith("refs/tags/")?a:`refs/tags/${a}`,!f&&await tp.exists({fs:t,gitdir:i,ref:a}))throw new tH("tag",a);let u=await tp.resolve({fs:t,gitdir:i,ref:l||"HEAD"}),{type:d}=await tT({fs:t,cache:e,gitdir:i,oid:u}),h=ea.from({object:u,type:d,tag:a.replace("refs/tags/",""),tagger:n,message:s,gpgsig:o});c&&(h=await ea.sign(h,r,c));let w=await eI({fs:t,gitdir:i,type:"tag",object:h.toObject()});await tp.writeRef({fs:t,gitdir:i,ref:a,value:w})}async function eV({fs:t,onSign:e,dir:r,gitdir:i=Z(r,".git"),ref:a,tagger:n,message:s=a,gpgsig:o,object:l,signingKey:c,force:f=!1,cache:u={}}){try{e_("fs",t),e_("gitdir",i),e_("ref",a),c&&e_("onSign",e);let r=new e$(t),d=await ez({fs:r,gitdir:i,author:n});if(!d)throw new tQ("tagger");return await eL({fs:r,cache:u,onSign:e,gitdir:i,ref:a,tagger:d,message:s,gpgsig:o,object:l,signingKey:c,force:f})}catch(t){throw t.caller="git.annotatedTag",t}}async function eK({fs:t,gitdir:e,ref:r,object:i,checkout:a=!1,force:n=!1}){let s;if(r!==c.clean(r))throw new tZ(r,c.clean(r));let o=`refs/heads/${r}`;if(!n&&await tp.exists({fs:t,gitdir:e,ref:o}))throw new tH("branch",r,!1);try{s=await tp.resolve({fs:t,gitdir:e,ref:i||"HEAD"})}catch(t){}s&&await tp.writeRef({fs:t,gitdir:e,ref:o,value:s}),a&&await tp.writeSymbolicRef({fs:t,gitdir:e,ref:"HEAD",value:o})}async function eZ({fs:t,dir:e,gitdir:r=Z(e,".git"),ref:i,object:a,checkout:n=!1,force:s=!1}){try{return e_("fs",t),e_("gitdir",r),e_("ref",i),await eK({fs:new e$(t),gitdir:r,ref:i,object:a,checkout:n,force:s})}catch(t){throw t.caller="git.branch",t}}let eY=(t,e)=>"."===t||null==e||0===e.length||"."===e||(e.length>=t.length?e.startsWith(t):t.startsWith(e));async function eJ({fs:t,cache:e,onProgress:r,dir:i,gitdir:a,remote:n,ref:s,filepaths:o,noCheckout:l,noUpdateHead:c,dryRun:f,force:u,track:d=!0}){let h;try{h=await tp.resolve({fs:t,gitdir:a,ref:s})}catch(r){if("HEAD"===s)throw r;let e=`${n}/${s}`;if(h=await tp.resolve({fs:t,gitdir:a,ref:e}),d){let e=await th.get({fs:t,gitdir:a});await e.set(`branch.${s}.remote`,n),await e.set(`branch.${s}.merge`,`refs/heads/${s}`),await th.save({fs:t,gitdir:a,config:e})}await tp.writeRef({fs:t,gitdir:a,ref:`refs/heads/${s}`,value:h})}if(!l){let n;try{n=await eX({fs:t,cache:e,onProgress:r,dir:i,gitdir:a,ref:s,force:u,filepaths:o})}catch(t){if(t instanceof T&&t.data.what===h)throw new tF(s,h);throw t}let l=n.filter(([t])=>"conflict"===t).map(([t,e])=>e);if(l.length>0)throw new tW(l);let c=n.filter(([t])=>"error"===t).map(([t,e])=>e);if(c.length>0)throw new w(c.join(", "));if(f)return;let d=0,m=n.length;await A.acquire({fs:t,gitdir:a,cache:e},async function(e){await Promise.all(n.filter(([t])=>"delete"===t||"delete-index"===t).map(async function([a,n]){let s=`${i}/${n}`;"delete"===a&&await t.rm(s),e.delete({filepath:n}),r&&await r({phase:"Updating workdir",loaded:++d,total:m})}))}),await A.acquire({fs:t,gitdir:a,cache:e},async function(e){for(let[a,s]of n)if("rmdir"===a||"rmdir-index"===a){let n=`${i}/${s}`;try{"rmdir-index"===a&&e.delete({filepath:s}),await t.rmdir(n),r&&await r({phase:"Updating workdir",loaded:++d,total:m})}catch(t){if("ENOTEMPTY"===t.code)console.log(`Did not delete ${s} because directory is not empty`);else throw t}}}),await Promise.all(n.filter(([t])=>"mkdir"===t||"mkdir-index"===t).map(async function([e,a]){let n=`${i}/${a}`;await t.mkdir(n),r&&await r({phase:"Updating workdir",loaded:++d,total:m})})),await A.acquire({fs:t,gitdir:a,cache:e},async function(s){await Promise.all(n.filter(([t])=>"create"===t||"create-index"===t||"update"===t||"mkdir-index"===t).map(async function([n,o,l,c,f]){let u=`${i}/${o}`;try{if("create-index"!==n&&"mkdir-index"!==n){let{object:r}=await tT({fs:t,cache:e,gitdir:a,oid:l});if(f&&await t.rm(u),33188===c)await t.write(u,r);else if(33261===c)await t.write(u,r,{mode:511});else if(40960===c)await t.writelink(u,r);else throw new w(`Invalid mode 0o${c.toString(8)} detected in blob ${l}`)}let i=await t.lstat(u);33261===c&&(i.mode=493),"mkdir-index"===n&&(i.mode=57344),s.insert({filepath:o,stats:i,oid:l}),r&&await r({phase:"Updating workdir",loaded:++d,total:m})}catch(t){console.log(t)}}))})}if(!c){let e=await tp.expand({fs:t,gitdir:a,ref:s});e.startsWith("refs/heads")?await tp.writeSymbolicRef({fs:t,gitdir:a,ref:"HEAD",value:e}):await tp.writeRef({fs:t,gitdir:a,ref:"HEAD",value:h})}}async function eX({fs:t,cache:e,onProgress:r,dir:i,gitdir:a,ref:n,force:s,filepaths:o}){let l=0;return ew({fs:t,cache:e,dir:i,gitdir:a,trees:[ec({ref:n}),eu(),M()],map:async function(t,[e,i,a]){if("."!==t){if(o&&!o.some(e=>eY(t,e)))return null;switch(r&&await r({phase:"Analyzing workdir",loaded:++l}),[!!a,!!e,!!i].map(Number).join("")){case"000":return;case"001":if(s&&o&&o.includes(t))return["delete",t];return;case"010":switch(await e.type()){case"tree":return["mkdir",t];case"blob":return["create",t,await e.oid(),await e.mode()];case"commit":return["mkdir-index",t,await e.oid(),await e.mode()];default:return["error",`new entry Unhandled type ${await e.type()}`]}case"011":switch(`${await e.type()}-${await i.type()}`){case"tree-tree":case"commit-tree":return;case"tree-blob":case"blob-tree":case"commit-blob":return["conflict",t];case"blob-blob":if(await e.oid()!==await i.oid()){if(s)return["update",t,await e.oid(),await e.mode(),await e.mode()!==await i.mode()];return["conflict",t]}if(await e.mode()===await i.mode())return["create-index",t,await e.oid(),await e.mode()];if(s)return["update",t,await e.oid(),await e.mode(),!0];return["conflict",t];default:return["error",`new entry Unhandled type ${e.type}`]}case"100":return["delete-index",t];case"101":switch(await a.type()){case"tree":return["rmdir",t];case"blob":if(await a.oid()===await i.oid()||s)return["delete",t];return["conflict",t];case"commit":return["rmdir-index",t];default:return["error",`delete entry Unhandled type ${await a.type()}`]}case"110":case"111":switch(`${await a.type()}-${await e.type()}`){case"tree-tree":return;case"blob-blob":if(await a.oid()===await e.oid()&&await a.mode()===await e.mode()&&!s)return;if(i){if(await i.oid()!==await a.oid()&&await i.oid()!==await e.oid()){if(s)return["update",t,await e.oid(),await e.mode(),await e.mode()!==await i.mode()];return["conflict",t]}}else if(s)return["update",t,await e.oid(),await e.mode(),await e.mode()!==await a.mode()];if(await e.mode()!==await a.mode())return["update",t,await e.oid(),await e.mode(),!0];if(await e.oid()!==await a.oid())return["update",t,await e.oid(),await e.mode(),!1];return;case"tree-blob":return["update-dir-to-blob",t,await e.oid()];case"blob-tree":return["update-blob-to-tree",t];case"commit-commit":return["mkdir-index",t,await e.oid(),await e.mode()];default:return["error",`update entry Unhandled type ${await a.type()}-${await e.type()}`]}}}},reduce:async function(t,e){return e=ed(e),t&&(t&&"rmdir"===t[0]?e.push(t):e.unshift(t)),e}})}async function eQ({fs:t,onProgress:e,dir:r,gitdir:i=Z(r,".git"),remote:a="origin",ref:n,filepaths:s,noCheckout:o=!1,noUpdateHead:l=void 0===n,dryRun:c=!1,force:f=!1,track:u=!0,cache:d={}}){try{return e_("fs",t),e_("dir",r),e_("gitdir",i),await eJ({fs:new e$(t),cache:d,onProgress:e,dir:r,gitdir:i,remote:a,ref:n||"HEAD",filepaths:s,noCheckout:o,noUpdateHead:l,dryRun:c,force:f,track:u})}catch(t){throw t.caller="git.checkout",t}}let e0=RegExp("^refs/(heads/|tags/|remotes/)?(.*)");function e1(t){let e=e0.exec(t);return e?"remotes/"===e[1]&&t.endsWith("/HEAD")?e[2].slice(0,-5):e[2]:t}async function e2({fs:t,gitdir:e,fullname:r=!1,test:i=!1}){let a=await tp.resolve({fs:t,gitdir:e,ref:"HEAD",depth:2});if(i)try{await tp.resolve({fs:t,gitdir:e,ref:a})}catch(t){return}if(a.startsWith("refs/"))return r?a:e1(a)}function e8({username:t="",password:e=""}){return`Basic ${u.from(`${t}:${e}`).toString("base64")}`}async function e4(t,e){let r=tj(t);for(;;){let{value:t,done:i}=await r.next();if(t&&await e(t),i)break}r.return&&r.return()}async function e6(t){let e=0,r=[];await e4(t,t=>{r.push(t),e+=t.byteLength});let i=new Uint8Array(e),a=0;for(let t of r)i.set(t,a),a+=t.byteLength;return i}function e3(t){let e=t.match(/^https?:\/\/([^/]+)@/);if(null==e)return{url:t,auth:{}};let[r,i]=(e=e[1]).split(":");return{url:t=t.replace(`${e}@`,""),auth:{username:r,password:i}}}function e9(t,e){let r=e.toString(16);return"0".repeat(t-r.length)+r}class e5{static flush(){return u.from("0000","utf8")}static delim(){return u.from("0001","utf8")}static encode(t){"string"==typeof t&&(t=u.from(t));let e=e9(4,t.length+4);return u.concat([u.from(e,"utf8"),t])}static streamReader(t){let e=new tR(t);return async function(){try{let t=await e.read(4);if(null==t)return!0;if(t=parseInt(t.toString("utf8"),16),0===t||1===t)return null;let r=await e.read(t-4);if(null==r)return!0;return r}catch(e){return t.error=e,!0}}}}async function e7(t){let e;let r={};for(;!0!==(e=await t());){if(null===e)continue;let t=(e=e.toString("utf8").replace(/\n$/,"")).indexOf("=");if(t>-1){let i=e.slice(0,t),a=e.slice(t+1);r[i]=a}else r[e]=!0}return{protocolVersion:2,capabilities2:r}}async function rt(t,{service:e}){let r=new Set,i=new Map,a=new Map,n=e5.streamReader(t),s=await n();for(;null===s;)s=await n();if(!0===s)throw new tG;if(s.includes("version 2"))return e7(n);if(s.toString("utf8").replace(/\n$/,"")!==`# service=${e}`)throw new t2(`# service=${e}\\n`,s.toString("utf8"));let o=await n();for(;null===o;)o=await n();if(!0===o)return{capabilities:r,refs:i,symrefs:a};if((o=o.toString("utf8")).includes("version 2"))return e7(n);let[l,c]=re(o,"\x00","\\x00");c.split(" ").map(t=>r.add(t));let[f,u]=re(l," "," ");for(i.set(u,f);;){let t=await n();if(!0===t)break;if(null!==t){let[e,r]=re(t.toString("utf8")," "," ");i.set(r,e)}}for(let t of r)if(t.startsWith("symref=")){let e=t.match(/symref=([^:]+):(.*)/);3===e.length&&a.set(e[1],e[2])}return{protocolVersion:1,capabilities:r,refs:i,symrefs:a}}function re(t,e,r){let i=t.trim().split(e);if(2!==i.length)throw new t2(`Two strings separated by '${r}'`,t.toString("utf8"));return i}let rr=(t,e)=>t.endsWith("?")?`${t}${e}`:`${t}/${e.replace(/^https?:\/\//,"")}`,ri=(t,e)=>{(e.username||e.password)&&(t.Authorization=e8(e)),e.headers&&Object.assign(t,e.headers)},ra=async t=>{try{let e=u.from(await e6(t.body)),r=e.toString("utf8");return{preview:r.length<256?r:r.slice(0,256)+"...",response:r,data:e}}catch(t){return{}}};class rn{static async capabilities(){return["discover","connect"]}static async discover({http:t,onProgress:e,onAuth:r,onAuthSuccess:i,onAuthFailure:a,corsProxy:n,service:s,url:o,headers:l,protocolVersion:c}){let f,u,{url:d,auth:h}=e3(o),w=n?rr(n,d):d;(h.username||h.password)&&(l.Authorization=e8(h)),2===c&&(l["Git-Protocol"]="version=2");let m=!1;do if(f=await t.request({onProgress:e,method:"GET",url:`${w}/info/refs?service=${s}`,headers:l}),u=!1,401===f.statusCode||203===f.statusCode){let t=m?a:r;if(t){if((h=await t(d,{...h,headers:{...l}}))&&h.cancel)throw new t5;h&&(ri(l,h),m=!0,u=!0)}}else 200===f.statusCode&&m&&i&&await i(d,h);while(u);if(200!==f.statusCode){let{response:t}=await ra(f);throw new tV(f.statusCode,f.statusMessage,t)}if(f.headers["content-type"]===`application/x-${s}-advertisement`){let t=await rt(f.body,{service:s});return t.auth=h,t}{let{preview:t,response:e,data:r}=await ra(f);try{let t=await rt([r],{service:s});return t.auth=h,t}catch(r){throw new t6(t,e)}}}static async connect({http:t,onProgress:e,corsProxy:r,service:i,url:a,auth:n,body:s,headers:o}){let l=e3(a);l&&(a=l.url),r&&(a=rr(r,a)),o["content-type"]=`application/x-${i}-request`,o.accept=`application/x-${i}-result`,ri(o,n);let c=await t.request({onProgress:e,method:"POST",url:`${a}/${i}`,body:s,headers:o});if(200!==c.statusCode){let{response:t}=ra(c);throw new tV(c.statusCode,c.statusMessage,t)}return c}}class rs{static getRemoteHelperFor({url:t}){let e=new Map;e.set("http",rn),e.set("https",rn);let r=function({url:t}){if(t.startsWith("git@"))return{transport:"ssh",address:t};let e=t.match(/(\w+)(:\/\/|::)(.*)/);if(null!==e){if("://"===e[2])return{transport:e[1],address:e[0]};if("::"===e[2])return{transport:e[1],address:e[3]}}}({url:t});if(!r)throw new t9(t);if(e.has(r.transport))return e.get(r.transport);throw new t3(t,r.transport,"ssh"===r.transport?t.replace(/^git@([^:]+):/,"https://$1/").replace(/^ssh:\/\//,"https://"):void 0)}}let ro=null;class rl{static async read({fs:t,gitdir:e}){null===ro&&(ro=new i);let r=Z(e,"shallow"),a=new Set;return await ro.acquire(r,async function(){let e=await t.read(r,{encoding:"utf8"});if(null===e||""===e.trim())return a;e.trim().split("\n").map(t=>a.add(t))}),a}static async write({fs:t,gitdir:e,oids:r}){null===ro&&(ro=new i);let a=Z(e,"shallow");if(r.size>0){let e=[...r].join("\n")+"\n";await ro.acquire(a,async function(){await t.write(a,e,{encoding:"utf8"})})}else await ro.acquire(a,async function(){await t.rm(a)})}}async function rc({fs:t,gitdir:e,oid:r}){let i=`objects/${r.slice(0,2)}/${r.slice(2)}`;return t.exists(`${e}/${i}`)}async function rf({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:a}){let n=await t.readdir(Z(r,"objects/pack"));for(let s of n=n.filter(t=>t.endsWith(".idx"))){let n=`${r}/objects/pack/${s}`,o=await tD({fs:t,cache:e,filename:n,getExternalRefDelta:a});if(o.error)throw new w(o.error);if(o.offsets.has(i))return!0}return!1}async function ru({fs:t,cache:e,gitdir:r,oid:i,format:a="content"}){let n=await rc({fs:t,gitdir:r,oid:i});return n||(n=await rf({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:i=>tT({fs:t,cache:e,gitdir:r,oid:i})})),n}function rd(t,e){let r=t.map(t=>t.split("=",1)[0]);return e.filter(t=>{let e=t.split("=",1)[0];return r.includes(e)})}let rh={version:"1.25.3",agent:"git/isomorphic-git@1.25.3"};class rw{constructor(){this._queue=[]}write(t){if(this._ended)throw Error("You cannot write to a FIFO that has already been ended!");if(this._waiting){let e=this._waiting;this._waiting=null,e({value:t})}else this._queue.push(t)}end(){if(this._ended=!0,this._waiting){let t=this._waiting;this._waiting=null,t({done:!0})}}destroy(t){this.error=t,this.end()}async next(){if(this._queue.length>0)return{value:this._queue.shift()};if(this._ended)return{done:!0};if(this._waiting)throw Error("You cannot call read until the previous call to read has returned!");return new Promise(t=>{this._waiting=t})}}function rm(t){let e=new rw,r="";return(async()=>{await e4(t,t=>{for(t=t.toString("utf8"),r+=t;;){let t=function(t){let e=t.indexOf("\r"),r=t.indexOf("\n");return -1===e&&-1===r?-1:-1===e?r+1:-1===r?e+1:r===e+1?r+1:Math.min(e,r)+1}(r);if(-1===t)break;e.write(r.slice(0,t)),r=r.slice(t)}}),r.length>0&&e.write(r),e.end()})(),e}class rp{static demux(t){let e=e5.streamReader(t),r=new rw,i=new rw,a=new rw,n=async function(){let s=await e();if(null===s)return n();if(!0===s){r.end(),a.end(),t.error?i.destroy(t.error):i.end();return}switch(s[0]){case 1:i.write(s.slice(1));break;case 2:a.write(s.slice(1));break;case 3:{let t=s.slice(1);a.write(t),r.end(),a.end(),i.destroy(Error(t.toString("utf8")));return}default:r.write(s)}n()};return n(),{packetlines:r,packfile:i,progress:a}}}async function rg(t){let{packetlines:e,packfile:r,progress:i}=rp.demux(t),a=[],n=[],s=[],o=!1,l=!1;return new Promise((c,f)=>{e4(e,e=>{let u=e.toString("utf8").trim();if(u.startsWith("shallow")){let t=u.slice(-41).trim();40!==t.length&&f(new z(t)),a.push(t)}else if(u.startsWith("unshallow")){let t=u.slice(-41).trim();40!==t.length&&f(new z(t)),n.push(t)}else if(u.startsWith("ACK")){let[,t,e]=u.split(" ");s.push({oid:t,status:e}),e||(l=!0)}else u.startsWith("NAK")?(o=!0,l=!0):(l=!0,o=!0);l&&(t.error?f(t.error):c({shallows:a,unshallows:n,acks:s,nak:o,packfile:r,progress:i}))}).finally(()=>{l||(t.error?f(t.error):c({shallows:a,unshallows:n,acks:s,nak:o,packfile:r,progress:i}))})})}async function ry({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:s,onAuthFailure:o,gitdir:l,ref:c,remoteRef:f,remote:d,url:h,corsProxy:w,depth:m=null,since:p=null,exclude:g=[],relative:y=!1,tags:b=!1,singleBranch:$=!1,headers:_={},prune:v=!1,pruneTags:x=!1}){let E=c||await e2({fs:t,gitdir:l,test:!0}),k=await th.get({fs:t,gitdir:l}),S=d||E&&await k.get(`branch.${E}.remote`)||"origin",j=h||await k.get(`remote.${S}.url`);if(void 0===j)throw new t0("remote OR url");let R=f||E&&await k.get(`branch.${E}.merge`)||c||"HEAD";void 0===w&&(w=await k.get("http.corsProxy"));let I=rs.getRemoteHelperFor({url:j}),O=await I.discover({http:r,onAuth:n,onAuthSuccess:s,onAuthFailure:o,corsProxy:w,service:"git-upload-pack",url:j,headers:_,protocolVersion:1}),P=O.auth,A=O.refs;if(0===A.size)return{defaultBranch:null,fetchHead:null,fetchHeadDescription:null};if(null!==m&&!O.capabilities.has("shallow"))throw new t4("shallow","depth");if(null!==p&&!O.capabilities.has("deepen-since"))throw new t4("deepen-since","since");if(g.length>0&&!O.capabilities.has("deepen-not"))throw new t4("deepen-not","exclude");if(!0===y&&!O.capabilities.has("deepen-relative"))throw new t4("deepen-relative","relative");let{oid:U,fullref:C}=tp.resolveAgainstMap({ref:R,map:A});for(let t of A.keys())t===C||"HEAD"===t||t.startsWith("refs/heads/")||b&&t.startsWith("refs/tags/")||A.delete(t);let N=rd([...O.capabilities],["multi_ack_detailed","no-done","side-band-64k","ofs-delta",`agent=${rh.agent}`]);y&&N.push("deepen-relative");let B=$?[U]:A.values(),D=$?[E]:await tp.listRefs({fs:t,gitdir:l,filepath:"refs"}),M=[];for(let r of D)try{r=await tp.expand({fs:t,gitdir:l,ref:r});let i=await tp.resolve({fs:t,gitdir:l,ref:r});await ru({fs:t,cache:e,gitdir:l,oid:i})&&M.push(i)}catch(t){}M=[...new Set(M)];let T=await rl.read({fs:t,gitdir:l}),H=function({capabilities:t=[],wants:e=[],haves:r=[],shallows:i=[],depth:a=null,since:n=null,exclude:s=[]}){let o=[];e=[...new Set(e)];let l=` ${t.join(" ")}`;for(let t of e)o.push(e5.encode(`want ${t}${l}
`)),l="";for(let t of i)o.push(e5.encode(`shallow ${t}
`));for(let t of(null!==a&&o.push(e5.encode(`deepen ${a}
`)),null!==n&&o.push(e5.encode(`deepen-since ${Math.floor(n.valueOf()/1e3)}
`)),s))o.push(e5.encode(`deepen-not ${t}
`));for(let t of(o.push(e5.flush()),r))o.push(e5.encode(`have ${t}
`));return o.push(e5.encode(`done
`)),o}({capabilities:N,wants:B,haves:M,shallows:O.capabilities.has("shallow")?[...T]:[],depth:m,since:p,exclude:g}),z=u.from(await e6(H)),W=await I.connect({http:r,onProgress:i,corsProxy:w,service:"git-upload-pack",url:j,auth:P,body:[z],headers:_}),F=await rg(W.body);for(let r of(W.headers&&(F.headers=W.headers),F.shallows))if(!T.has(r))try{let{object:i}=await tT({fs:t,cache:e,gitdir:l,oid:r}),a=new es(i),n=await Promise.all(a.headers().parent.map(r=>ru({fs:t,cache:e,gitdir:l,oid:r})));0===n.length||n.every(t=>t)||T.add(r)}catch(t){T.add(r)}for(let t of F.unshallows)T.delete(t);if(await rl.write({fs:t,gitdir:l,oids:T}),$){let e=new Map([[C,U]]),r=new Map,i=10,a=C;for(;i--;){let t=O.symrefs.get(a);if(void 0===t)break;r.set(a,t),a=t}let n=A.get(a);n&&e.set(a,n);let{pruned:s}=await tp.updateRemoteRefs({fs:t,gitdir:l,remote:S,refs:e,symrefs:r,tags:b,prune:v});v&&(F.pruned=s)}else{let{pruned:e}=await tp.updateRemoteRefs({fs:t,gitdir:l,remote:S,refs:A,symrefs:O.symrefs,tags:b,prune:v,pruneTags:x});v&&(F.pruned=e)}if(F.HEAD=O.symrefs.get("HEAD"),void 0===F.HEAD){let{oid:t}=tp.resolveAgainstMap({ref:"HEAD",map:A});for(let[e,r]of A.entries())if("HEAD"!==e&&r===t){F.HEAD=e;break}}let G=C.startsWith("refs/tags")?"tag":"branch";F.FETCH_HEAD={oid:U,description:`${G} '${e1(C)}' of ${j}`},(i||a)&&e4(rm(F.progress),async t=>{if(a&&await a(t),i){let e=t.match(/([^:]*).*\((\d+?)\/(\d+?)\)/);e&&await i({phase:e[1].trim(),loaded:parseInt(e[2],10),total:parseInt(e[3],10)})}});let q=u.from(await e6(F.packfile));if(W.body.error)throw W.body.error;let L=q.slice(-20).toString("hex"),V={defaultBranch:F.HEAD,fetchHead:F.FETCH_HEAD.oid,fetchHeadDescription:F.FETCH_HEAD.description};if(F.headers&&(V.headers=F.headers),v&&(V.pruned=F.pruned),""!==L&&"5041434b0000000200000000"!==q.slice(0,12).toString("hex")){V.packfile=`objects/pack/pack-${L}.pack`;let r=Z(l,V.packfile);await t.write(r,q);let a=await tC.fromPack({pack:q,getExternalRefDelta:r=>tT({fs:t,cache:e,gitdir:l,oid:r}),onProgress:i});await t.write(r.replace(/\.pack$/,".idx"),await a.toBuffer())}return V}async function rb({fs:t,bare:e=!1,dir:r,gitdir:i=e?r:Z(r,".git"),defaultBranch:a="master"}){if(await t.exists(i+"/config"))return;let n=["hooks","info","objects/info","objects/pack","refs/heads","refs/tags"];for(let e of n=n.map(t=>i+"/"+t))await t.mkdir(e);await t.write(i+"/config",`[core]
	repositoryformatversion = 0
	filemode = false
	bare = ${e}
`+(e?"":"	logallrefupdates = true\n")+"	symlinks = false\n	ignorecase = true\n"),await t.write(i+"/HEAD",`ref: refs/heads/${a}
`)}async function r$({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:s,onAuthFailure:o,dir:l,gitdir:c,url:f,corsProxy:u,ref:d,remote:h,depth:w,since:m,exclude:p,relative:g,singleBranch:y,noCheckout:b,noTags:$,headers:_}){try{if(await rb({fs:t,gitdir:c}),await eG({fs:t,gitdir:c,remote:h,url:f,force:!1}),u){let e=await th.get({fs:t,gitdir:c});await e.set("http.corsProxy",u),await th.save({fs:t,gitdir:c,config:e})}let{defaultBranch:v,fetchHead:x}=await ry({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:s,onAuthFailure:o,gitdir:c,ref:d,remote:h,corsProxy:u,depth:w,since:m,exclude:p,relative:g,singleBranch:y,headers:_,tags:!$});if(null===x)return;d=(d=d||v).replace("refs/heads/",""),await eJ({fs:t,cache:e,onProgress:i,dir:l,gitdir:c,ref:d,remote:h,noCheckout:b})}catch(e){throw await t.rmdir(c,{recursive:!0,maxRetries:10}).catch(()=>void 0),e}}async function r_({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,dir:o,gitdir:l=Z(o,".git"),url:c,corsProxy:f,ref:u,remote:d="origin",depth:h,since:w,exclude:m=[],relative:p=!1,singleBranch:g=!1,noCheckout:y=!1,noTags:b=!1,headers:$={},cache:_={}}){try{return e_("fs",t),e_("http",e),e_("gitdir",l),y||e_("dir",o),e_("url",c),await r$({fs:new e$(t),cache:_,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,dir:o,gitdir:l,url:c,corsProxy:f,ref:u,remote:d,depth:h,since:w,exclude:m,relative:p,singleBranch:g,noCheckout:y,noTags:b,headers:$})}catch(t){throw t.caller="git.clone",t}}async function rv({fs:t,onSign:e,dir:r,gitdir:i=Z(r,".git"),message:a,author:n,committer:s,signingKey:o,dryRun:l=!1,noUpdateBranch:c=!1,ref:f,parent:u,tree:d,cache:h={}}){try{e_("fs",t),e_("message",a),o&&e_("onSign",e);let r=new e$(t),w=await ez({fs:r,gitdir:i,author:n});if(!w)throw new tQ("author");let m=await eW({fs:r,gitdir:i,author:w,committer:s});if(!m)throw new tQ("committer");return await eU({fs:r,cache:h,onSign:e,gitdir:i,message:a,author:w,committer:m,signingKey:o,dryRun:l,noUpdateBranch:c,ref:f,parent:u,tree:d})}catch(t){throw t.caller="git.commit",t}}async function rx({fs:t,dir:e,gitdir:r=Z(e,".git"),fullname:i=!1,test:a=!1}){try{return e_("fs",t),e_("gitdir",r),await e2({fs:new e$(t),gitdir:r,fullname:i,test:a})}catch(t){throw t.caller="git.currentBranch",t}}async function rE({fs:t,gitdir:e,ref:r}){if(r=r.startsWith("refs/heads/")?r:`refs/heads/${r}`,!await tp.exists({fs:t,gitdir:e,ref:r}))throw new T(r);let i=await tp.expand({fs:t,gitdir:e,ref:r});if(i===await e2({fs:t,gitdir:e,fullname:!0})){let r=await tp.resolve({fs:t,gitdir:e,ref:i});await tp.writeRef({fs:t,gitdir:e,ref:"HEAD",value:r})}await tp.deleteRef({fs:t,gitdir:e,ref:i})}async function rk({fs:t,dir:e,gitdir:r=Z(e,".git"),ref:i}){try{return e_("fs",t),e_("ref",i),await rE({fs:new e$(t),gitdir:r,ref:i})}catch(t){throw t.caller="git.deleteBranch",t}}async function rS({fs:t,dir:e,gitdir:r=Z(e,".git"),ref:i}){try{e_("fs",t),e_("ref",i),await tp.deleteRef({fs:new e$(t),gitdir:r,ref:i})}catch(t){throw t.caller="git.deleteRef",t}}async function rj({fs:t,gitdir:e,remote:r}){let i=await th.get({fs:t,gitdir:e});await i.deleteSection("remote",r),await th.save({fs:t,gitdir:e,config:i})}async function rR({fs:t,dir:e,gitdir:r=Z(e,".git"),remote:i}){try{return e_("fs",t),e_("remote",i),await rj({fs:new e$(t),gitdir:r,remote:i})}catch(t){throw t.caller="git.deleteRemote",t}}async function rI({fs:t,gitdir:e,ref:r}){r=r.startsWith("refs/tags/")?r:`refs/tags/${r}`,await tp.deleteRef({fs:t,gitdir:e,ref:r})}async function rO({fs:t,dir:e,gitdir:r=Z(e,".git"),ref:i}){try{return e_("fs",t),e_("ref",i),await rI({fs:new e$(t),gitdir:r,ref:i})}catch(t){throw t.caller="git.deleteTag",t}}async function rP({fs:t,gitdir:e,oid:r}){let i=r.slice(0,2);return(await t.readdir(`${e}/objects/${i}`)).map(t=>`${i}${t}`).filter(t=>t.startsWith(r))}async function rA({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:a}){let n=[],s=await t.readdir(Z(r,"objects/pack"));for(let o of s=s.filter(t=>t.endsWith(".idx"))){let s=`${r}/objects/pack/${o}`,l=await tD({fs:t,cache:e,filename:s,getExternalRefDelta:a});if(l.error)throw new w(l.error);for(let t of l.offsets.keys())t.startsWith(i)&&n.push(t)}return n}async function rU({fs:t,cache:e,gitdir:r,oid:i}){let a=await rP({fs:t,gitdir:r,oid:i});for(let n of(await rA({fs:t,cache:e,gitdir:r,oid:i,getExternalRefDelta:i=>tT({fs:t,cache:e,gitdir:r,oid:i})})))-1===a.indexOf(n)&&a.push(n);if(1===a.length)return a[0];if(a.length>1)throw new tz("oids",i,a);throw new T(`an object matching "${i}"`)}async function rC({fs:t,dir:e,gitdir:r=Z(e,".git"),oid:i,cache:a={}}){try{return e_("fs",t),e_("gitdir",r),e_("oid",i),await rU({fs:new e$(t),cache:a,gitdir:r,oid:i})}catch(t){throw t.caller="git.expandOid",t}}async function rN({fs:t,dir:e,gitdir:r=Z(e,".git"),ref:i}){try{return e_("fs",t),e_("gitdir",r),e_("ref",i),await tp.expand({fs:new e$(t),gitdir:r,ref:i})}catch(t){throw t.caller="git.expandRef",t}}async function rB({fs:t,cache:e,gitdir:r,oids:i}){let a={},n=i.length,s=i.map((t,e)=>({index:e,oid:t}));for(;s.length;){let i=new Set;for(let{oid:t,index:e}of s)a[t]||(a[t]=new Set),a[t].add(e),a[t].size===n&&i.add(t);if(i.size>0)return[...i];let o=new Map;for(let{oid:i,index:n}of s)try{let{object:s}=await tT({fs:t,cache:e,gitdir:r,oid:i}),{parent:l}=es.from(s).parseHeaders();for(let t of l)a[t]&&a[t].has(n)||o.set(t+":"+n,{oid:t,index:n})}catch(t){}s=Array.from(o.values())}return[]}let rD=/^.*(\r?\n|$)/gm;function rM({branches:t,contents:e}){let r=t[1],i=t[2],a=e[0],n=e[1],s=e[2],o=f(n.match(rD),a.match(rD),s.match(rD)),l="",c=!0;for(let t of o)t.ok&&(l+=t.ok.join("")),t.conflict&&(c=!1,l+=`${"<".repeat(7)} ${r}
`+t.conflict.a.join("")+`${"=".repeat(7)}
`+t.conflict.b.join("")+`${">".repeat(7)} ${i}
`);return{cleanMerge:c,mergedText:l}}async function rT({fs:t,cache:e,dir:r,gitdir:i=Z(r,".git"),index:a,ourOid:n,baseOid:s,theirOid:o,ourName:l="ours",baseName:c="base",theirName:f="theirs",dryRun:u=!1,abortOnConflict:d=!0,mergeDriver:h}){let w=ec({ref:n}),m=ec({ref:s}),p=ec({ref:o}),g=[],y=[],b=[],$=[],_=await ew({fs:t,cache:e,dir:r,gitdir:i,trees:[w,m,p],map:async function(e,[r,n,s]){let o=U(e),u=await ev(r,n),w=await ev(s,n);switch(`${u}-${w}`){case"false-false":return{mode:await n.mode(),path:o,oid:await n.oid(),type:await n.type()};case"false-true":return s?{mode:await s.mode(),path:o,oid:await s.oid(),type:await s.type()}:void 0;case"true-false":return r?{mode:await r.mode(),path:o,oid:await r.oid(),type:await r.type()}:void 0;case"true-true":if(r&&n&&s&&await r.type()==="blob"&&await n.type()==="blob"&&await s.type()==="blob")return rH({fs:t,gitdir:i,path:o,ours:r,base:n,theirs:s,ourName:l,baseName:c,theirName:f,mergeDriver:h}).then(async t=>{if(t.cleanMerge)d||a.insert({filepath:e,oid:t.mergeResult.oid,stage:0});else if(g.push(e),y.push(e),!d){let t=await n.oid(),i=await r.oid(),o=await s.oid();a.delete({filepath:e}),a.insert({filepath:e,oid:t,stage:1}),a.insert({filepath:e,oid:i,stage:2}),a.insert({filepath:e,oid:o,stage:3})}return t.mergeResult});if(n&&!r&&s&&await n.type()==="blob"&&await s.type()==="blob"){if(g.push(e),b.push(e),!d){let t=await n.oid(),r=await s.oid();a.delete({filepath:e}),a.insert({filepath:e,oid:t,stage:1}),a.insert({filepath:e,oid:r,stage:3})}return{mode:await s.mode(),oid:await s.oid(),type:"blob",path:o}}if(n&&r&&!s&&await n.type()==="blob"&&await r.type()==="blob"){if(g.push(e),$.push(e),!d){let t=await n.oid(),i=await r.oid();a.delete({filepath:e}),a.insert({filepath:e,oid:t,stage:1}),a.insert({filepath:e,oid:i,stage:2})}return{mode:await r.mode(),oid:await r.oid(),type:"blob",path:o}}if(n&&!r&&!s&&await n.type()==="blob")return;throw new tJ}},reduce:0!==g.length&&(!r||d)?void 0:async(e,r)=>{let a=r.filter(Boolean);if(e&&(!e||"tree"!==e.type||0!==a.length)){if(a.length>0){let r=new t_(a).toObject(),n=await eI({fs:t,gitdir:i,type:"tree",object:r,dryRun:u});e.oid=n}return e}}});return 0!==g.length?(r&&!d&&await ew({fs:t,cache:e,dir:r,gitdir:i,trees:[ec({ref:_.oid})],map:async function(e,[i]){let a=`${r}/${e}`;if(await i.type()==="blob"){let e=await i.mode(),r=new TextDecoder().decode(await i.content());await t.write(a,r,{mode:e})}return!0}}),new tX(g,y,b,$)):_.oid}async function rH({fs:t,gitdir:e,path:r,ours:i,base:a,theirs:n,ourName:s,theirName:o,baseName:l,dryRun:c,mergeDriver:f=rM}){let d="blob",h=await a.mode()===await i.mode()?await n.mode():await i.mode();if(await i.oid()===await n.oid())return{cleanMerge:!0,mergeResult:{mode:h,path:r,oid:await i.oid(),type:d}};if(await i.oid()===await a.oid())return{cleanMerge:!0,mergeResult:{mode:h,path:r,oid:await n.oid(),type:d}};if(await n.oid()===await a.oid())return{cleanMerge:!0,mergeResult:{mode:h,path:r,oid:await i.oid(),type:d}};let w=u.from(await i.content()).toString("utf8"),m=u.from(await a.content()).toString("utf8"),p=u.from(await n.content()).toString("utf8"),{mergedText:g,cleanMerge:y}=await f({branches:[l,s,o],contents:[m,w,p],path:r});return{cleanMerge:y,mergeResult:{mode:h,path:r,oid:await eI({fs:t,gitdir:e,type:"blob",object:u.from(g,"utf8"),dryRun:c}),type:d}}}async function rz({fs:t,cache:e,dir:r,gitdir:i,ours:a,theirs:n,fastForward:s=!0,fastForwardOnly:o=!1,dryRun:l=!1,noUpdateBranch:c=!1,abortOnConflict:f=!0,message:u,author:d,committer:h,signingKey:w,onSign:m,mergeDriver:p}){void 0===a&&(a=await e2({fs:t,gitdir:i,fullname:!0})),a=await tp.expand({fs:t,gitdir:i,ref:a}),n=await tp.expand({fs:t,gitdir:i,ref:n});let g=await tp.resolve({fs:t,gitdir:i,ref:a}),y=await tp.resolve({fs:t,gitdir:i,ref:n}),b=await rB({fs:t,cache:e,gitdir:i,oids:[g,y]});if(1!==b.length)throw new tJ;let $=b[0];if($===y)return{oid:g,alreadyMerged:!0};if(s&&$===g)return l||c||await tp.writeRef({fs:t,gitdir:i,ref:a,value:y}),{oid:y,fastForward:!0};{if(o)throw new tq;let s=await A.acquire({fs:t,gitdir:i,cache:e,allowUnmerged:!1},async s=>rT({fs:t,cache:e,dir:r,gitdir:i,index:s,ourOid:g,theirOid:y,baseOid:$,ourName:e1(a),baseName:"base",theirName:e1(n),dryRun:l,abortOnConflict:f,mergeDriver:p}));if(s instanceof tX)throw s;return u||(u=`Merge branch '${e1(n)}' into ${e1(a)}`),{oid:await eU({fs:t,cache:e,gitdir:i,message:u,ref:a,tree:s,parent:[g,y],author:d,committer:h,signingKey:w,onSign:m,dryRun:l,noUpdateBranch:c}),tree:s,mergeCommit:!0}}}async function rW({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:s,onAuthFailure:o,dir:l,gitdir:c,ref:f,url:u,remote:d,remoteRef:h,prune:w,pruneTags:m,fastForward:p,fastForwardOnly:g,corsProxy:y,singleBranch:b,headers:$,author:_,committer:v,signingKey:x}){try{if(!f){let e=await e2({fs:t,gitdir:c});if(!e)throw new t0("ref");f=e}let{fetchHead:E,fetchHeadDescription:k}=await ry({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:s,onAuthFailure:o,gitdir:c,corsProxy:y,ref:f,url:u,remote:d,remoteRef:h,singleBranch:b,headers:$,prune:w,pruneTags:m});await rz({fs:t,cache:e,gitdir:c,ours:f,theirs:E,fastForward:p,fastForwardOnly:g,message:`Merge ${k}`,author:_,committer:v,signingKey:x,dryRun:!1,noUpdateBranch:!1}),await eJ({fs:t,cache:e,onProgress:i,dir:l,gitdir:c,ref:f,remote:d,noCheckout:!1})}catch(t){throw t.caller="git.pull",t}}async function rF({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,dir:o,gitdir:l=Z(o,".git"),ref:c,url:f,remote:u,remoteRef:d,corsProxy:h,singleBranch:w,headers:m={},cache:p={}}){try{e_("fs",t),e_("http",e),e_("gitdir",l);let g={name:"",email:"",timestamp:Date.now(),timezoneOffset:0};return await rW({fs:new e$(t),cache:p,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,dir:o,gitdir:l,ref:c,url:f,remote:u,remoteRef:d,fastForwardOnly:!0,corsProxy:h,singleBranch:w,headers:m,author:g,committer:g})}catch(t){throw t.caller="git.fastForward",t}}async function rG({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,dir:o,gitdir:l=Z(o,".git"),ref:c,remote:f,remoteRef:u,url:d,corsProxy:h,depth:w=null,since:m=null,exclude:p=[],relative:g=!1,tags:y=!1,singleBranch:b=!1,headers:$={},prune:_=!1,pruneTags:v=!1,cache:x={}}){try{return e_("fs",t),e_("http",e),e_("gitdir",l),await ry({fs:new e$(t),cache:x,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,gitdir:l,ref:c,remote:f,remoteRef:u,url:d,corsProxy:h,depth:w,since:m,exclude:p,relative:g,tags:y,singleBranch:b,headers:$,prune:_,pruneTags:v})}catch(t){throw t.caller="git.fetch",t}}async function rq({fs:t,dir:e,gitdir:r=Z(e,".git"),oids:i,cache:a={}}){try{return e_("fs",t),e_("gitdir",r),e_("oids",i),await rB({fs:new e$(t),cache:a,gitdir:r,oids:i})}catch(t){throw t.caller="git.findMergeBase",t}}async function rL({fs:t,filepath:e}){if(await t.exists(Z(e,".git")))return e;{let r=C(e);if(r===e)throw new T(`git root for ${e}`);return rL({fs:t,filepath:r})}}async function rV({fs:t,filepath:e}){try{return e_("fs",t),e_("filepath",e),await rL({fs:new e$(t),filepath:e})}catch(t){throw t.caller="git.findRoot",t}}async function rK({fs:t,dir:e,gitdir:r=Z(e,".git"),path:i}){try{return e_("fs",t),e_("gitdir",r),e_("path",i),await eH({fs:new e$(t),gitdir:r,path:i})}catch(t){throw t.caller="git.getConfig",t}}async function rZ({fs:t,gitdir:e,path:r}){return(await th.get({fs:t,gitdir:e})).getall(r)}async function rY({fs:t,dir:e,gitdir:r=Z(e,".git"),path:i}){try{return e_("fs",t),e_("gitdir",r),e_("path",i),await rZ({fs:new e$(t),gitdir:r,path:i})}catch(t){throw t.caller="git.getConfigAll",t}}async function rJ({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,url:n,headers:s={},forPush:o=!1}){try{e_("http",t),e_("url",n);let l=rs.getRemoteHelperFor({url:n}),c=await l.discover({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,service:o?"git-receive-pack":"git-upload-pack",url:n,headers:s,protocolVersion:1}),f={capabilities:[...c.capabilities]};for(let[t,e]of c.refs){let r=t.split("/"),i=r.pop(),a=f;for(let t of r)a[t]=a[t]||{},a=a[t];a[i]=e}for(let[t,e]of c.symrefs){let r=t.split("/"),i=r.pop(),a=f;for(let t of r)a[t]=a[t]||{},a=a[t];a[i]=e}return f}catch(t){throw t.caller="git.getRemoteInfo",t}}function rX(t,e,r,i){let a=[];for(let[n,s]of t.refs){if(e&&!n.startsWith(e))continue;if(n.endsWith("^{}")){if(i){let t=n.replace("^{}",""),e=a[a.length-1],r=e.ref===t?e:a.find(e=>e.ref===t);if(void 0===r)throw Error("I did not expect this to happen");r.peeled=s}continue}let o={ref:n,oid:s};r&&t.symrefs.has(n)&&(o.target=t.symrefs.get(n)),a.push(o)}return a}async function rQ({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,url:n,headers:s={},forPush:o=!1,protocolVersion:l=2}){try{e_("http",t),e_("url",n);let c=rs.getRemoteHelperFor({url:n}),f=await c.discover({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,service:o?"git-receive-pack":"git-upload-pack",url:n,headers:s,protocolVersion:l});if(2===f.protocolVersion)return{protocolVersion:f.protocolVersion,capabilities:f.capabilities2};let u={};for(let t of f.capabilities){let[e,r]=t.split("=");r?u[e]=r:u[e]=!0}return{protocolVersion:1,capabilities:u,refs:rX(f,void 0,!0,!0)}}catch(t){throw t.caller="git.getRemoteInfo2",t}}async function r0({type:t,object:e,format:r="content",oid:i}){return"deflated"!==r&&("wrapped"!==r&&(e=tv.wrap({type:t,object:e})),i=await x(e)),{oid:i,object:e}}async function r1({object:t}){try{e_("object",t),t="string"==typeof t?u.from(t,"utf8"):u.from(t);let{oid:e,object:r}=await r0({type:"blob",format:"content",object:t});return{oid:e,type:"blob",object:new Uint8Array(r),format:"wrapped"}}catch(t){throw t.caller="git.hashBlob",t}}async function r2({fs:t,cache:e,onProgress:r,dir:i,gitdir:a,filepath:n}){try{n=Z(i,n);let s=await t.read(n),o=await tC.fromPack({pack:s,getExternalRefDelta:r=>tT({fs:t,cache:e,gitdir:a,oid:r}),onProgress:r});return await t.write(n.replace(/\.pack$/,".idx"),await o.toBuffer()),{oids:[...o.hashes]}}catch(t){throw t.caller="git.indexPack",t}}async function r8({fs:t,onProgress:e,dir:r,gitdir:i=Z(r,".git"),filepath:a,cache:n={}}){try{return e_("fs",t),e_("dir",r),e_("gitdir",r),e_("filepath",a),await r2({fs:new e$(t),cache:n,onProgress:e,dir:r,gitdir:i,filepath:a})}catch(t){throw t.caller="git.indexPack",t}}async function r4({fs:t,bare:e=!1,dir:r,gitdir:i=e?r:Z(r,".git"),defaultBranch:a="master"}){try{return e_("fs",t),e_("gitdir",i),e||e_("dir",r),await rb({fs:new e$(t),bare:e,dir:r,gitdir:i,defaultBranch:a})}catch(t){throw t.caller="git.init",t}}async function r6({fs:t,cache:e,gitdir:r,oid:i,ancestor:a,depth:n}){let s=await rl.read({fs:t,gitdir:r});if(!i)throw new t0("oid");if(!a)throw new t0("ancestor");if(i===a)return!1;let o=[i],l=new Set,c=0;for(;o.length;){if(c++===n)throw new tY(n);let i=o.shift(),{type:f,object:u}=await tT({fs:t,cache:e,gitdir:r,oid:i});if("commit"!==f)throw new H(i,f,"commit");let d=es.from(u).parse();for(let t of d.parent)if(t===a)return!0;if(!s.has(i))for(let t of d.parent)l.has(t)||(o.push(t),l.add(t))}return!1}async function r3({fs:t,dir:e,gitdir:r=Z(e,".git"),oid:i,ancestor:a,depth:n=-1,cache:s={}}){try{return e_("fs",t),e_("gitdir",r),e_("oid",i),e_("ancestor",a),await r6({fs:new e$(t),cache:s,gitdir:r,oid:i,ancestor:a,depth:n})}catch(t){throw t.caller="git.isDescendent",t}}async function r9({fs:t,dir:e,gitdir:r=Z(e,".git"),filepath:i}){try{return e_("fs",t),e_("dir",e),e_("gitdir",r),e_("filepath",i),eE.isIgnored({fs:new e$(t),dir:e,gitdir:r,filepath:i})}catch(t){throw t.caller="git.isIgnored",t}}async function r5({fs:t,dir:e,gitdir:r=Z(e,".git"),remote:i}){try{return e_("fs",t),e_("gitdir",r),tp.listBranches({fs:new e$(t),gitdir:r,remote:i})}catch(t){throw t.caller="git.listBranches",t}}async function r7({fs:t,gitdir:e,ref:r,cache:i}){if(!r)return A.acquire({fs:t,gitdir:e,cache:i},async function(t){return t.entries.map(t=>t.path)});{let a=await tp.resolve({gitdir:e,fs:t,ref:r}),n=[];return await it({fs:t,cache:i,gitdir:e,oid:a,filenames:n,prefix:""}),n}}async function it({fs:t,cache:e,gitdir:r,oid:i,filenames:a,prefix:n}){let{tree:s}=await eD({fs:t,cache:e,gitdir:r,oid:i});for(let i of s)"tree"===i.type?await it({fs:t,cache:e,gitdir:r,oid:i.oid,filenames:a,prefix:Z(n,i.path)}):a.push(Z(n,i.path))}async function ie({fs:t,dir:e,gitdir:r=Z(e,".git"),ref:i,cache:a={}}){try{return e_("fs",t),e_("gitdir",r),await r7({fs:new e$(t),cache:a,gitdir:r,ref:i})}catch(t){throw t.caller="git.listFiles",t}}async function ir({fs:t,cache:e,gitdir:r,ref:i}){let a;try{a=await tp.resolve({gitdir:r,fs:t,ref:i})}catch(t){if(t instanceof T)return[]}return(await eD({fs:t,cache:e,gitdir:r,oid:a})).tree.map(t=>({target:t.path,note:t.oid}))}async function ii({fs:t,dir:e,gitdir:r=Z(e,".git"),ref:i="refs/notes/commits",cache:a={}}){try{return e_("fs",t),e_("gitdir",r),e_("ref",i),await ir({fs:new e$(t),cache:a,gitdir:r,ref:i})}catch(t){throw t.caller="git.listNotes",t}}async function ia({fs:t,gitdir:e}){let r=await th.get({fs:t,gitdir:e});return Promise.all((await r.getSubsections("remote")).map(async t=>{let e=await r.get(`remote.${t}.url`);return{remote:t,url:e}}))}async function is({fs:t,dir:e,gitdir:r=Z(e,".git")}){try{return e_("fs",t),e_("gitdir",r),await ia({fs:new e$(t),gitdir:r})}catch(t){throw t.caller="git.listRemotes",t}}async function io(t){let e;let r=e5.streamReader(t),i=[];for(;!0!==(e=await r());){if(null===e)continue;let[t,r,...a]=(e=e.toString("utf8").replace(/\n$/,"")).split(" "),n={ref:r,oid:t};for(let t of a){let[e,r]=t.split(":");"symref-target"===e?n.target=r:"peeled"===e&&(n.peeled=r)}i.push(n)}return i}async function il({prefix:t,symrefs:e,peelTags:r}){let i=[];return i.push(e5.encode("command=ls-refs\n")),i.push(e5.encode(`agent=${rh.agent}
`)),(r||e||t)&&i.push(e5.delim()),r&&i.push(e5.encode("peel")),e&&i.push(e5.encode("symrefs")),t&&i.push(e5.encode(`ref-prefix ${t}`)),i.push(e5.flush()),i}async function ic({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,url:n,headers:s={},forPush:o=!1,protocolVersion:l=2,prefix:c,symrefs:f,peelTags:u}){try{e_("http",t),e_("url",n);let d=await rn.discover({http:t,onAuth:e,onAuthSuccess:r,onAuthFailure:i,corsProxy:a,service:o?"git-receive-pack":"git-upload-pack",url:n,headers:s,protocolVersion:l});if(1===d.protocolVersion)return rX(d,c,f,u);let h=await il({prefix:c,symrefs:f,peelTags:u}),w=await rn.connect({http:t,auth:d.auth,headers:s,corsProxy:a,service:o?"git-receive-pack":"git-upload-pack",url:n,body:h});return io(w.body)}catch(t){throw t.caller="git.listServerRefs",t}}async function iu({fs:t,dir:e,gitdir:r=Z(e,".git")}){try{return e_("fs",t),e_("gitdir",r),tp.listTags({fs:new e$(t),gitdir:r})}catch(t){throw t.caller="git.listTags",t}}async function id({fs:t,cache:e,gitdir:r,oid:i}){let{type:a,object:n}=await tT({fs:t,cache:e,gitdir:r,oid:i});if("tag"===a)return id({fs:t,cache:e,gitdir:r,oid:i=ea.from(n).parse().object});if("commit"!==a)throw new H(i,a,"commit");return{commit:es.from(n),oid:i}}async function ih({fs:t,cache:e,gitdir:r,oid:i}){let{commit:a,oid:n}=await id({fs:t,cache:e,gitdir:r,oid:i});return{oid:n,commit:a.parse(),payload:a.withoutSignature()}}async function iw({fs:t,cache:e,gitdir:r,oid:i,fileId:a}){let n;if("e69de29bb2d1d6434b8b29ae775ad8c2e48c5391"===a)return;let s=await eo({fs:t,cache:e,gitdir:r,oid:i}),o=s.tree;return a===s.oid?n=s.path:Array.isArray(n=await im({fs:t,cache:e,gitdir:r,tree:o,fileId:a,oid:i}))&&(0===n.length?n=void 0:1===n.length&&(n=n[0])),n}async function im({fs:t,cache:e,gitdir:r,tree:i,fileId:a,oid:n,filepaths:s=[],parentPath:o=""}){let l=i.entries().map(function(i){let l;return i.oid===a?(l=Z(o,i.path),s.push(l)):"tree"===i.type&&(l=tT({fs:t,cache:e,gitdir:r,oid:i.oid}).then(function({object:l}){return im({fs:t,cache:e,gitdir:r,tree:t_.from(l),fileId:a,oid:n,filepaths:s,parentPath:Z(o,i.path)})})),l});return await Promise.all(l),s}async function ip({fs:t,cache:e,gitdir:r,filepath:i,ref:a,depth:n,since:s,force:o,follow:l}){let c,f,u;let d=void 0===s?void 0:Math.floor(s.valueOf()/1e3),h=[],w=await rl.read({fs:t,gitdir:r}),m=await tp.resolve({fs:t,gitdir:r,ref:a}),p=[await ih({fs:t,cache:e,gitdir:r,oid:m})];function g(t){u&&i&&h.push(t)}for(;p.length>0;){let a=p.pop();if(void 0!==d&&a.commit.committer.timestamp<=d)break;if(i){let n;try{n=await eN({fs:t,cache:e,gitdir:r,oid:a.commit.tree,filepath:i}),f&&c!==n&&h.push(f),c=n,f=a,u=!0}catch(n){if(n instanceof T){let s=l&&c;if(s&&(s=await iw({fs:t,cache:e,gitdir:r,oid:a.commit.tree,fileId:c}))){if(Array.isArray(s)){if(f){let a=await iw({fs:t,cache:e,gitdir:r,oid:f.commit.tree,fileId:c});if(Array.isArray(a)){if(1===(s=s.filter(t=>-1===a.indexOf(t))).length)i=s=s[0],f&&h.push(f);else{s=!1,f&&h.push(f);break}}}}else i=s,f&&h.push(f)}if(!s){if(u&&c&&(h.push(f),!o))break;if(!o&&!l)throw n}f=a,u=!1}else throw n}}else h.push(a);if(void 0!==n&&h.length===n){g(a);break}if(!w.has(a.oid))for(let i of a.commit.parent){let a=await ih({fs:t,cache:e,gitdir:r,oid:i});p.map(t=>t.oid).includes(a.oid)||p.push(a)}0===p.length&&g(a),p.sort((t,e)=>{var r,i;return r=t.commit,i=e.commit,r.committer.timestamp-i.committer.timestamp})}return h}async function ig({fs:t,dir:e,gitdir:r=Z(e,".git"),filepath:i,ref:a="HEAD",depth:n,since:s,force:o,follow:l,cache:c={}}){try{return e_("fs",t),e_("gitdir",r),e_("ref",a),await ip({fs:new e$(t),cache:c,gitdir:r,filepath:i,ref:a,depth:n,since:s,force:o,follow:l})}catch(t){throw t.caller="git.log",t}}async function iy({fs:t,onSign:e,dir:r,gitdir:i=Z(r,".git"),ours:a,theirs:n,fastForward:s=!0,fastForwardOnly:o=!1,dryRun:l=!1,noUpdateBranch:c=!1,abortOnConflict:f=!0,message:u,author:d,committer:h,signingKey:w,cache:m={},mergeDriver:p}){try{e_("fs",t),w&&e_("onSign",e);let g=new e$(t),y=await ez({fs:g,gitdir:i,author:d});if(!y&&(!o||!s))throw new tQ("author");let b=await eW({fs:g,gitdir:i,author:y,committer:h});if(!b&&(!o||!s))throw new tQ("committer");return await rz({fs:g,cache:m,dir:r,gitdir:i,ours:a,theirs:n,fastForward:s,fastForwardOnly:o,dryRun:l,noUpdateBranch:c,abortOnConflict:f,message:u,author:y,committer:b,signingKey:w,onSign:e,mergeDriver:p})}catch(t){throw t.caller="git.merge",t}}let ib={commit:16,tree:32,blob:48,tag:64,ofs_delta:96,ref_delta:112};async function i$({fs:t,cache:e,dir:r,gitdir:i=Z(r,".git"),oids:n}){let s=new a,o=[];function l(t,e){let r=u.from(t,e);o.push(r),s.update(r)}async function c({stype:t,object:e}){let r=ib[t],i=e.length,a=i>15?128:0,n=15&i;i>>>=4;let s=(a|r|n).toString(16);for(l(s,"hex");a;)l(e9(2,s=(a=i>127?128:0)|127&i),"hex"),i>>>=7;l(u.from(await ej(e)))}for(let r of(l("PACK"),l("00000002","hex"),l(e9(8,n.length),"hex"),n)){let{type:a,object:n}=await tT({fs:t,cache:e,gitdir:i,oid:r});await c({write:l,object:n,stype:a})}let f=s.digest();return o.push(f),o}async function i_({fs:t,cache:e,gitdir:r,oids:i,write:a}){let n=await i$({fs:t,cache:e,gitdir:r,oids:i}),s=u.from(await e6(n)),o=s.slice(-20).toString("hex"),l=`pack-${o}.pack`;return a?(await t.write(Z(r,`objects/pack/${l}`),s),{filename:l}):{filename:l,packfile:new Uint8Array(s)}}async function iv({fs:t,dir:e,gitdir:r=Z(e,".git"),oids:i,write:a=!1,cache:n={}}){try{return e_("fs",t),e_("gitdir",r),e_("oids",i),await i_({fs:new e$(t),cache:n,gitdir:r,oids:i,write:a})}catch(t){throw t.caller="git.packObjects",t}}async function ix({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,dir:o,gitdir:l=Z(o,".git"),ref:c,url:f,remote:u,remoteRef:d,prune:h=!1,pruneTags:w=!1,fastForward:m=!0,fastForwardOnly:p=!1,corsProxy:g,singleBranch:y,headers:b={},author:$,committer:_,signingKey:v,cache:x={}}){try{e_("fs",t),e_("gitdir",l);let E=new e$(t),k=await ez({fs:E,gitdir:l,author:$});if(!k)throw new tQ("author");let S=await eW({fs:E,gitdir:l,author:k,committer:_});if(!S)throw new tQ("committer");return await rW({fs:E,cache:x,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,dir:o,gitdir:l,ref:c,url:f,remote:u,remoteRef:d,fastForward:m,fastForwardOnly:p,corsProxy:g,singleBranch:y,headers:b,author:k,committer:S,signingKey:v,prune:h,pruneTags:w})}catch(t){throw t.caller="git.pull",t}}async function iE({fs:t,cache:e,dir:r,gitdir:i=Z(r,".git"),start:a,finish:n}){let s=await rl.read({fs:t,gitdir:i}),o=new Set,l=new Set;for(let e of a)o.add(await tp.resolve({fs:t,gitdir:i,ref:e}));for(let e of n)try{let r=await tp.resolve({fs:t,gitdir:i,ref:e});l.add(r)}catch(t){}let c=new Set;async function f(r){c.add(r);let{type:a,object:n}=await tT({fs:t,cache:e,gitdir:i,oid:r});if("tag"===a)return f(ea.from(n).headers().object);if("commit"!==a)throw new H(r,a,"commit");if(!s.has(r))for(r of es.from(n).headers().parent)l.has(r)||c.has(r)||await f(r)}for(let t of o)await f(t);return c}async function ik({fs:t,cache:e,dir:r,gitdir:i=Z(r,".git"),oids:a}){let n=new Set;async function s(r){if(n.has(r))return;n.add(r);let{type:a,object:o}=await tT({fs:t,cache:e,gitdir:i,oid:r});if("tag"===a){let t=ea.from(o).headers().object;await s(t)}else if("commit"===a){let t=es.from(o).headers().tree;await s(t)}else if("tree"===a)for(let t of t_.from(o))"blob"===t.type&&n.add(t.oid),"tree"===t.type&&await s(t.oid)}for(let t of a)await s(t);return n}async function iS(t){let e={},r="",i=e5.streamReader(t),a=await i();for(;!0!==a;)null!==a&&(r+=a.toString("utf8")+"\n"),a=await i();let n=r.toString("utf8").split("\n");if(!(a=n.shift()).startsWith("unpack "))throw new t2('unpack ok" or "unpack [error message]',a);for(let t of(e.ok="unpack ok"===a,e.ok||(e.error=a.slice(7)),e.refs={},n)){if(""===t.trim())continue;let r=t.slice(0,2),i=t.slice(3),a=i.indexOf(" ");-1===a&&(a=i.length);let n=i.slice(0,a),s=i.slice(a+1);e.refs[n]={ok:"ok"===r,error:s}}return e}async function ij({capabilities:t=[],triplets:e=[]}){let r=[],i=`\0 ${t.join(" ")}`;for(let t of e)r.push(e5.encode(`${t.oldoid} ${t.oid} ${t.fullRef}${i}
`)),i="";return r.push(e5.flush()),r}async function iR({fs:t,cache:e,http:r,onProgress:i,onMessage:a,onAuth:n,onAuthSuccess:s,onAuthFailure:o,gitdir:l,ref:c,remoteRef:f,remote:u,url:d,force:h=!1,delete:w=!1,corsProxy:m,headers:p={}}){let g;let y=c||await e2({fs:t,gitdir:l});if(void 0===y)throw new t0("ref");let b=await th.get({fs:t,gitdir:l});u=u||await b.get(`branch.${y}.pushRemote`)||await b.get("remote.pushDefault")||await b.get(`branch.${y}.remote`)||"origin";let $=d||await b.get(`remote.${u}.pushurl`)||await b.get(`remote.${u}.url`);if(void 0===$)throw new t0("remote OR url");let _=f||await b.get(`branch.${y}.merge`);if(void 0===$)throw new t0("remoteRef");void 0===m&&(m=await b.get("http.corsProxy"));let v=await tp.expand({fs:t,gitdir:l,ref:y}),x=w?"0000000000000000000000000000000000000000":await tp.resolve({fs:t,gitdir:l,ref:v}),E=rs.getRemoteHelperFor({url:$}),k=await E.discover({http:r,onAuth:n,onAuthSuccess:s,onAuthFailure:o,corsProxy:m,service:"git-receive-pack",url:$,headers:p,protocolVersion:1}),S=k.auth;if(_)try{g=await tp.expandAgainstMap({ref:_,map:k.refs})}catch(t){if(t instanceof T)g=_.startsWith("refs/")?_:`refs/heads/${_}`;else throw t}else g=v;let j=k.refs.get(g)||"0000000000000000000000000000000000000000",R=!k.capabilities.has("no-thin"),I=new Set;if(!w){let r=[...k.refs.values()],i=new Set;if("0000000000000000000000000000000000000000"!==j){let a=await rB({fs:t,cache:e,gitdir:l,oids:[x,j]});for(let t of a)r.push(t);R&&(i=await ik({fs:t,cache:e,gitdir:l,oids:a}))}if(!r.includes(x)){let i=await iE({fs:t,cache:e,gitdir:l,start:[x],finish:r});I=await ik({fs:t,cache:e,gitdir:l,oids:i})}if(R){try{let r=await tp.resolve({fs:t,gitdir:l,ref:`refs/remotes/${u}/HEAD`,depth:2}),{oid:a}=await tp.resolveAgainstMap({ref:r.replace(`refs/remotes/${u}/`,""),fullref:r,map:k.refs});for(let r of(await ik({fs:t,cache:e,gitdir:l,oids:[a]})))i.add(r)}catch(t){}for(let t of i)I.delete(t)}if(x===j&&(h=!0),!h){if(v.startsWith("refs/tags")&&"0000000000000000000000000000000000000000"!==j)throw new t8("tag-exists");if("0000000000000000000000000000000000000000"!==x&&"0000000000000000000000000000000000000000"!==j&&!await r6({fs:t,cache:e,gitdir:l,oid:x,ancestor:j,depth:-1}))throw new t8("not-fast-forward")}}let O=rd([...k.capabilities],["report-status","side-band-64k",`agent=${rh.agent}`]),P=await ij({capabilities:O,triplets:[{oldoid:j,oid:x,fullRef:g}]}),A=w?[]:await i$({fs:t,cache:e,gitdir:l,oids:[...I]}),U=await E.connect({http:r,onProgress:i,corsProxy:m,service:"git-receive-pack",url:$,auth:S,headers:p,body:[...P,...A]}),{packfile:C,progress:N}=await rp.demux(U.body);a&&e4(rm(N),async t=>{await a(t)});let B=await iS(C);if(U.headers&&(B.headers=U.headers),u&&B.ok&&B.refs[g].ok){let e=`refs/remotes/${u}/${g.replace("refs/heads","")}`;w?await tp.deleteRef({fs:t,gitdir:l,ref:e}):await tp.writeRef({fs:t,gitdir:l,ref:e,value:x})}if(B.ok&&Object.values(B.refs).every(t=>t.ok))return B;throw new tL(Object.entries(B.refs).filter(([t,e])=>!e.ok).map(([t,e])=>`
  - ${t}: ${e.error}`).join(""),B)}async function iI({fs:t,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,dir:o,gitdir:l=Z(o,".git"),ref:c,remoteRef:f,remote:u="origin",url:d,force:h=!1,delete:w=!1,corsProxy:m,headers:p={},cache:g={}}){try{return e_("fs",t),e_("http",e),e_("gitdir",l),await iR({fs:new e$(t),cache:g,http:e,onProgress:r,onMessage:i,onAuth:a,onAuthSuccess:n,onAuthFailure:s,gitdir:l,ref:c,remoteRef:f,remote:u,url:d,force:h,delete:w,corsProxy:m,headers:p})}catch(t){throw t.caller="git.push",t}}async function iO({fs:t,cache:e,gitdir:r,oid:i}){let{type:a,object:n}=await tT({fs:t,cache:e,gitdir:r,oid:i});if("tag"===a)return iO({fs:t,cache:e,gitdir:r,oid:i=ea.from(n).parse().object});if("blob"!==a)throw new H(i,a,"blob");return{oid:i,blob:new Uint8Array(n)}}async function iP({fs:t,cache:e,gitdir:r,oid:i,filepath:a}){return void 0!==a&&(i=await eN({fs:t,cache:e,gitdir:r,oid:i,filepath:a})),await iO({fs:t,cache:e,gitdir:r,oid:i})}async function iA({fs:t,dir:e,gitdir:r=Z(e,".git"),oid:i,filepath:a,cache:n={}}){try{return e_("fs",t),e_("gitdir",r),e_("oid",i),await iP({fs:new e$(t),cache:n,gitdir:r,oid:i,filepath:a})}catch(t){throw t.caller="git.readBlob",t}}async function iU({fs:t,dir:e,gitdir:r=Z(e,".git"),oid:i,cache:a={}}){try{return e_("fs",t),e_("gitdir",r),e_("oid",i),await ih({fs:new e$(t),cache:a,gitdir:r,oid:i})}catch(t){throw t.caller="git.readCommit",t}}async function iC({fs:t,cache:e,gitdir:r,ref:i="refs/notes/commits",oid:a}){let n=await tp.resolve({gitdir:r,fs:t,ref:i}),{blob:s}=await iP({fs:t,cache:e,gitdir:r,oid:n,filepath:a});return s}async function iN({fs:t,dir:e,gitdir:r=Z(e,".git"),ref:i="refs/notes/commits",oid:a,cache:n={}}){try{return e_("fs",t),e_("gitdir",r),e_("ref",i),e_("oid",a),await iC({fs:new e$(t),cache:n,gitdir:r,ref:i,oid:a})}catch(t){throw t.caller="git.readNote",t}}async function iB({fs:t,dir:e,gitdir:r=Z(e,".git"),oid:i,format:a="parsed",filepath:n,encoding:s,cache:o={}}){try{e_("fs",t),e_("gitdir",r),e_("oid",i);let e=new e$(t);void 0!==n&&(i=await eN({fs:e,cache:o,gitdir:r,oid:i,filepath:n}));let l=await tT({fs:e,cache:o,gitdir:r,oid:i,format:"parsed"===a?"content":a});if(l.oid=i,"parsed"===a)switch(l.format="parsed",l.type){case"commit":l.object=es.from(l.object).parse();break;case"tree":l.object=t_.from(l.object).entries();break;case"blob":s?l.object=l.object.toString(s):(l.object=new Uint8Array(l.object),l.format="content");break;case"tag":l.object=ea.from(l.object).parse();break;default:throw new H(l.oid,l.type,"blob|commit|tag|tree")}else("deflated"===l.format||"wrapped"===l.format)&&(l.type=l.format);return l}catch(t){throw t.caller="git.readObject",t}}async function iD({fs:t,cache:e,gitdir:r,oid:i}){let{type:a,object:n}=await tT({fs:t,cache:e,gitdir:r,oid:i,format:"content"});if("tag"!==a)throw new H(i,a,"tag");let s=ea.from(n);return{oid:i,tag:s.parse(),payload:s.payload()}}async function iM({fs:t,dir:e,gitdir:r=Z(e,".git"),oid:i,cache:a={}}){try{return e_("fs",t),e_("gitdir",r),e_("oid",i),await iD({fs:new e$(t),cache:a,gitdir:r,oid:i})}catch(t){throw t.caller="git.readTag",t}}async function iT({fs:t,dir:e,gitdir:r=Z(e,".git"),oid:i,filepath:a,cache:n={}}){try{return e_("fs",t),e_("gitdir",r),e_("oid",i),await eD({fs:new e$(t),cache:n,gitdir:r,oid:i,filepath:a})}catch(t){throw t.caller="git.readTree",t}}async function iH({fs:t,dir:e,gitdir:r=Z(e,".git"),filepath:i,cache:a={}}){try{e_("fs",t),e_("gitdir",r),e_("filepath",i),await A.acquire({fs:new e$(t),gitdir:r,cache:a},async function(t){t.delete({filepath:i})})}catch(t){throw t.caller="git.remove",t}}async function iz({fs:t,cache:e,onSign:r,gitdir:i,ref:a="refs/notes/commits",oid:n,author:s,committer:o,signingKey:l}){let c;try{c=await tp.resolve({gitdir:i,fs:t,ref:a})}catch(t){if(!(t instanceof T))throw t}let f=(await eD({fs:t,gitdir:i,oid:c||"4b825dc642cb6eb9a060e54bf8d69288fbee4904"})).tree;f=f.filter(t=>t.path!==n);let u=await eM({fs:t,gitdir:i,tree:f});return await eU({fs:t,cache:e,onSign:r,gitdir:i,ref:a,tree:u,parent:c&&[c],message:`Note removed by 'isomorphic-git removeNote'
`,author:s,committer:o,signingKey:l})}async function iW({fs:t,onSign:e,dir:r,gitdir:i=Z(r,".git"),ref:a="refs/notes/commits",oid:n,author:s,committer:o,signingKey:l,cache:c={}}){try{e_("fs",t),e_("gitdir",i),e_("oid",n);let r=new e$(t),f=await ez({fs:r,gitdir:i,author:s});if(!f)throw new tQ("author");let u=await eW({fs:r,gitdir:i,author:f,committer:o});if(!u)throw new tQ("committer");return await iz({fs:r,cache:c,onSign:e,gitdir:i,ref:a,oid:n,author:f,committer:u,signingKey:l})}catch(t){throw t.caller="git.removeNote",t}}async function iF({fs:t,gitdir:e,oldref:r,ref:i,checkout:a=!1}){if(i!==c.clean(i))throw new tZ(i,c.clean(i));if(r!==c.clean(r))throw new tZ(r,c.clean(r));let n=`refs/heads/${r}`,s=`refs/heads/${i}`;if(await tp.exists({fs:t,gitdir:e,ref:s}))throw new tH("branch",i,!1);let o=await tp.resolve({fs:t,gitdir:e,ref:n,depth:1});await tp.writeRef({fs:t,gitdir:e,ref:s,value:o}),await tp.deleteRef({fs:t,gitdir:e,ref:n});let l=await e2({fs:t,gitdir:e,fullname:!0})===n;(a||l)&&await tp.writeSymbolicRef({fs:t,gitdir:e,ref:"HEAD",value:s})}async function iG({fs:t,dir:e,gitdir:r=Z(e,".git"),ref:i,oldref:a,checkout:n=!1}){try{return e_("fs",t),e_("gitdir",r),e_("ref",i),e_("oldref",a),await iF({fs:new e$(t),gitdir:r,ref:i,oldref:a,checkout:n})}catch(t){throw t.caller="git.renameBranch",t}}async function iq({gitdir:t,type:e,object:r}){return x(tv.wrap({type:e,object:r}))}async function iL({fs:t,dir:e,gitdir:r=Z(e,".git"),filepath:i,ref:a,cache:n={}}){try{let s,o;e_("fs",t),e_("gitdir",r),e_("filepath",i);let l=new e$(t);try{s=await tp.resolve({fs:l,gitdir:r,ref:a||"HEAD"})}catch(t){if(a)throw t}if(s)try{s=await eN({fs:l,cache:n,gitdir:r,oid:s,filepath:i})}catch(t){s=null}let c={ctime:new Date(0),mtime:new Date(0),dev:0,ino:0,mode:0,uid:0,gid:0,size:0},f=e&&await l.read(Z(e,i));f&&(o=await iq({gitdir:r,type:"blob",object:f}),s===o&&(c=await l.lstat(Z(e,i)))),await A.acquire({fs:l,gitdir:r,cache:n},async function(t){t.delete({filepath:i}),s&&t.insert({filepath:i,stats:c,oid:s})})}catch(t){throw t.caller="git.reset",t}}async function iV({fs:t,dir:e,gitdir:r=Z(e,".git"),ref:i,depth:a}){try{return e_("fs",t),e_("gitdir",r),e_("ref",i),await tp.resolve({fs:new e$(t),gitdir:r,ref:i,depth:a})}catch(t){throw t.caller="git.resolveRef",t}}async function iK({fs:t,dir:e,gitdir:r=Z(e,".git"),path:i,value:a,append:n=!1}){try{e_("fs",t),e_("gitdir",r),e_("path",i);let e=new e$(t),s=await th.get({fs:e,gitdir:r});n?await s.append(i,a):await s.set(i,a),await th.save({fs:e,gitdir:r,config:s})}catch(t){throw t.caller="git.setConfig",t}}async function iZ({fs:t,dir:e,gitdir:r=Z(e,".git"),filepath:i,cache:a={}}){try{e_("fs",t),e_("gitdir",r),e_("filepath",i);let n=new e$(t);if(await eE.isIgnored({fs:n,gitdir:r,dir:e,filepath:i}))return"ignored";let s=await iJ({fs:n,cache:a,gitdir:r}),o=await iY({fs:n,cache:a,gitdir:r,tree:s,path:i}),l=await A.acquire({fs:n,gitdir:r,cache:a},async function(t){for(let e of t)if(e.path===i)return e;return null}),c=await n.lstat(Z(e,i)),f=null!==o,u=null!==l,d=null!==c,h=async()=>{if(u&&!j(l,c))return l.oid;{let t=await n.read(Z(e,i)),s=await iq({gitdir:r,type:"blob",object:t});return u&&l.oid===s&&-1!==c.size&&A.acquire({fs:n,gitdir:r,cache:a},async function(t){t.insert({filepath:i,stats:c,oid:s})}),s}};if(!f&&!d&&!u)return"absent";if(!f&&!d&&u)return"*absent";if(!f&&d&&!u)return"*added";if(!f&&d&&u)return await h()===l.oid?"added":"*added";if(f&&!d&&!u)return"deleted";if(f&&!d&&u)return l.oid,"*deleted";if(f&&d&&!u)return await h()===o?"*undeleted":"*undeletemodified";if(f&&d&&u){let t=await h();if(t===o)return t===l.oid?"unmodified":"*unmodified";return t===l.oid?"modified":"*modified"}}catch(t){throw t.caller="git.status",t}}async function iY({fs:t,cache:e,gitdir:r,tree:i,path:a}){"string"==typeof a&&(a=a.split("/"));let n=a.shift();for(let s of i)if(s.path===n){if(0===a.length)return s.oid;let{type:i,object:n}=await tT({fs:t,cache:e,gitdir:r,oid:s.oid});if("tree"===i)return iY({fs:t,cache:e,gitdir:r,tree:t_.from(n),path:a});if("blob"===i)throw new H(s.oid,i,"blob",a.join("/"))}return null}async function iJ({fs:t,cache:e,gitdir:r}){let i;try{i=await tp.resolve({fs:t,gitdir:r,ref:"HEAD"})}catch(t){if(t instanceof T)return[]}let{tree:a}=await eD({fs:t,cache:e,gitdir:r,oid:i});return a}async function iX({fs:t,dir:e,gitdir:r=Z(e,".git"),ref:i="HEAD",filepaths:a=["."],filter:n,cache:s={},ignored:o=!1}){try{e_("fs",t),e_("gitdir",r),e_("ref",i);let l=new e$(t);return await ew({fs:l,cache:s,dir:e,gitdir:r,trees:[ec({ref:i}),eu(),M()],map:async function(t,[r,i,s]){let c;if(!r&&!s&&i&&!o&&await eE.isIgnored({fs:l,dir:e,filepath:t})||!a.some(e=>eY(t,e)))return null;if(n&&!n(t))return;let[f,u,d]=await Promise.all([r&&r.type(),i&&i.type(),s&&s.type()]),h=[f,u,d].includes("blob");if(("tree"===f||"special"===f)&&!h)return;if("commit"===f)return null;if(("tree"===u||"special"===u)&&!h)return;if("commit"===d)return null;if(("tree"===d||"special"===d)&&!h)return;let w="blob"===f?await r.oid():void 0,m="blob"===d?await s.oid():void 0;"blob"!==f&&"blob"===u&&"blob"!==d?c="42":"blob"===u&&(c=await i.oid());let p=[void 0,w,c,m],g=p.map(t=>p.indexOf(t));return g.shift(),[t,...g]}})}catch(t){throw t.caller="git.statusMatrix",t}}async function iQ({fs:t,dir:e,gitdir:r=Z(e,".git"),ref:i,object:a,force:n=!1}){try{e_("fs",t),e_("gitdir",r),e_("ref",i);let e=new e$(t);if(void 0===i)throw new t0("ref");i=i.startsWith("refs/tags/")?i:`refs/tags/${i}`;let s=await tp.resolve({fs:e,gitdir:r,ref:a||"HEAD"});if(!n&&await tp.exists({fs:e,gitdir:r,ref:i}))throw new tH("tag",i);await tp.writeRef({fs:e,gitdir:r,ref:i,value:s})}catch(t){throw t.caller="git.tag",t}}async function i0({fs:t,dir:e,gitdir:r=Z(e,".git"),cache:i={},filepath:a,oid:n,mode:s,add:o,remove:l,force:c}){try{let f;e_("fs",t),e_("gitdir",r),e_("filepath",a);let u=new e$(t);if(l)return await A.acquire({fs:u,gitdir:r,cache:i},async function(t){let r;if(!c&&(r=await u.lstat(Z(e,a)))){if(r.isDirectory())throw new tK("directory");return}t.has({filepath:a})&&t.delete({filepath:a})});if(!n){if(!(f=await u.lstat(Z(e,a))))throw new T(`file at "${a}" on disk and "remove" not set`);if(f.isDirectory())throw new tK("directory")}return await A.acquire({fs:u,gitdir:r,cache:i},async function(t){if(!o&&!t.has({filepath:a}))throw new T(`file at "${a}" in index and "add" not set`);let i={ctime:new Date(0),mtime:new Date(0),dev:0,ino:0,mode:s,uid:0,gid:0,size:0};if(!n){let t=(i=f).isSymbolicLink()?await u.readlink(Z(e,a)):await u.read(Z(e,a));n=await eI({fs:u,gitdir:r,type:"blob",format:"content",object:t})}return t.insert({filepath:a,oid:n,stats:i}),n})}catch(t){throw t.caller="git.updateIndex",t}}function i1(){try{return rh.version}catch(t){throw t.caller="git.version",t}}async function i2({fs:t,dir:e,gitdir:r=Z(e,".git"),trees:i,map:a,reduce:n,iterate:s,cache:o={}}){try{return e_("fs",t),e_("gitdir",r),e_("trees",i),await ew({fs:new e$(t),cache:o,dir:e,gitdir:r,trees:i,map:a,reduce:n,iterate:s})}catch(t){throw t.caller="git.walk",t}}async function i8({fs:t,dir:e,gitdir:r=Z(e,".git"),blob:i}){try{return e_("fs",t),e_("gitdir",r),e_("blob",i),await eI({fs:new e$(t),gitdir:r,type:"blob",object:i,format:"content"})}catch(t){throw t.caller="git.writeBlob",t}}async function i4({fs:t,gitdir:e,commit:r}){let i=es.from(r).toObject();return await eI({fs:t,gitdir:e,type:"commit",object:i,format:"content"})}async function i6({fs:t,dir:e,gitdir:r=Z(e,".git"),commit:i}){try{return e_("fs",t),e_("gitdir",r),e_("commit",i),await i4({fs:new e$(t),gitdir:r,commit:i})}catch(t){throw t.caller="git.writeCommit",t}}async function i3({fs:t,dir:e,gitdir:r=Z(e,".git"),type:i,object:a,format:n="parsed",oid:s,encoding:o}){try{let e=new e$(t);if("parsed"===n){switch(i){case"commit":a=es.from(a).toObject();break;case"tree":a=t_.from(a).toObject();break;case"blob":a=u.from(a,o);break;case"tag":a=ea.from(a).toObject();break;default:throw new H(s||"",i,"blob|commit|tag|tree")}n="content"}return s=await eI({fs:e,gitdir:r,type:i,object:a,oid:s,format:n})}catch(t){throw t.caller="git.writeObject",t}}async function i9({fs:t,dir:e,gitdir:r=Z(e,".git"),ref:i,value:a,force:n=!1,symbolic:s=!1}){try{e_("fs",t),e_("gitdir",r),e_("ref",i),e_("value",a);let e=new e$(t);if(i!==c.clean(i))throw new tZ(i,c.clean(i));if(!n&&await tp.exists({fs:e,gitdir:r,ref:i}))throw new tH("ref",i);s?await tp.writeSymbolicRef({fs:e,gitdir:r,ref:i,value:a}):(a=await tp.resolve({fs:e,gitdir:r,ref:a}),await tp.writeRef({fs:e,gitdir:r,ref:i,value:a}))}catch(t){throw t.caller="git.writeRef",t}}async function i5({fs:t,gitdir:e,tag:r}){let i=ea.from(r).toObject();return await eI({fs:t,gitdir:e,type:"tag",object:i,format:"content"})}async function i7({fs:t,dir:e,gitdir:r=Z(e,".git"),tag:i}){try{return e_("fs",t),e_("gitdir",r),e_("tag",i),await i5({fs:new e$(t),gitdir:r,tag:i})}catch(t){throw t.caller="git.writeTag",t}}async function at({fs:t,dir:e,gitdir:r=Z(e,".git"),tree:i}){try{return e_("fs",t),e_("gitdir",r),e_("tree",i),await eM({fs:new e$(t),gitdir:r,tree:i})}catch(t){throw t.caller="git.writeTree",t}}e.default={Errors:et,STAGE:M,TREE:ec,WORKDIR:eu,add:eP,abortMerge:ex,addNote:eF,addRemote:eq,annotatedTag:eV,branch:eZ,checkout:eQ,clone:r_,commit:rv,getConfig:rK,getConfigAll:rY,setConfig:iK,currentBranch:rx,deleteBranch:rk,deleteRef:rS,deleteRemote:rR,deleteTag:rO,expandOid:rC,expandRef:rN,fastForward:rF,fetch:rG,findMergeBase:rq,findRoot:rV,getRemoteInfo:rJ,getRemoteInfo2:rQ,hashBlob:r1,indexPack:r8,init:r4,isDescendent:r3,isIgnored:r9,listBranches:r5,listFiles:ie,listNotes:ii,listRemotes:is,listServerRefs:ic,listTags:iu,log:ig,merge:iy,packObjects:iv,pull:ix,push:iI,readBlob:iA,readCommit:iU,readNote:iN,readObject:iB,readTag:iM,readTree:iT,remove:iH,removeNote:iW,renameBranch:iG,resetIndex:iL,updateIndex:i0,resolveRef:iV,status:iZ,statusMatrix:iX,tag:iQ,version:i1,walk:i2,writeBlob:i8,writeCommit:i6,writeObject:i3,writeRef:i9,writeTag:i7,writeTree:at}}}]);