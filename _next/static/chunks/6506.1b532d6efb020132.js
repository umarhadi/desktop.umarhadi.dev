"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6506],{16506:function(e,r,t){t.d(r,{CID:function(){return $}});var n=function e(r,t,n){t=t||[];var i=n=n||0;for(;r>=o;)t[n++]=255&r|128,r/=128;for(;-128&r;)t[n++]=255&r|128,r>>>=7;return t[n]=0|r,e.bytes=n-i+1,t},o=Math.pow(2,31);var i=function e(r,t){var n,o=0,i=0,s=t=t||0,a=r.length;do{if(s>=a)throw e.bytes=0,new RangeError("Could not decode varint");n=r[s++],o+=i<28?(127&n)<<i:(127&n)*Math.pow(2,i),i+=7}while(n>=128);return e.bytes=s-t,o};var s=Math.pow(2,7),a=Math.pow(2,14),c=Math.pow(2,21),h=Math.pow(2,28),d=Math.pow(2,35),u=Math.pow(2,42),f=Math.pow(2,49),l=Math.pow(2,56),p=Math.pow(2,63),b={encode:n,decode:i,encodingLength:function(e){return e<s?1:e<a?2:e<c?3:e<h?4:e<d?5:e<u?6:e<f?7:e<l?8:e<p?9:10}};const w=(e,r=0)=>[b.decode(e,r),b.decode.bytes],y=(e,r,t=0)=>(b.encode(e,r,t),r),g=e=>b.encodingLength(e),v=(new Uint8Array(0),e=>{if(e instanceof Uint8Array&&"Uint8Array"===e.constructor.name)return e;if(e instanceof ArrayBuffer)return new Uint8Array(e);if(ArrayBuffer.isView(e))return new Uint8Array(e.buffer,e.byteOffset,e.byteLength);throw new Error("Unknown type, must be binary type")});class m{constructor(e,r,t,n){this.code=e,this.size=r,this.digest=t,this.bytes=n}}var x=function(e,r){if(e.length>=255)throw new TypeError("Alphabet too long");for(var t=new Uint8Array(256),n=0;n<t.length;n++)t[n]=255;for(var o=0;o<e.length;o++){var i=e.charAt(o),s=i.charCodeAt(0);if(255!==t[s])throw new TypeError(i+" is ambiguous");t[s]=o}var a=e.length,c=e.charAt(0),h=Math.log(a)/Math.log(256),d=Math.log(256)/Math.log(a);function u(e){if("string"!==typeof e)throw new TypeError("Expected String");if(0===e.length)return new Uint8Array;var r=0;if(" "!==e[r]){for(var n=0,o=0;e[r]===c;)n++,r++;for(var i=(e.length-r)*h+1>>>0,s=new Uint8Array(i);e[r];){var d=t[e.charCodeAt(r)];if(255===d)return;for(var u=0,f=i-1;(0!==d||u<o)&&-1!==f;f--,u++)d+=a*s[f]>>>0,s[f]=d%256>>>0,d=d/256>>>0;if(0!==d)throw new Error("Non-zero carry");o=u,r++}if(" "!==e[r]){for(var l=i-o;l!==i&&0===s[l];)l++;for(var p=new Uint8Array(n+(i-l)),b=n;l!==i;)p[b++]=s[l++];return p}}}return{encode:function(r){if(r instanceof Uint8Array||(ArrayBuffer.isView(r)?r=new Uint8Array(r.buffer,r.byteOffset,r.byteLength):Array.isArray(r)&&(r=Uint8Array.from(r))),!(r instanceof Uint8Array))throw new TypeError("Expected Uint8Array");if(0===r.length)return"";for(var t=0,n=0,o=0,i=r.length;o!==i&&0===r[o];)o++,t++;for(var s=(i-o)*d+1>>>0,h=new Uint8Array(s);o!==i;){for(var u=r[o],f=0,l=s-1;(0!==u||f<n)&&-1!==l;l--,f++)u+=256*h[l]>>>0,h[l]=u%a>>>0,u=u/a>>>0;if(0!==u)throw new Error("Non-zero carry");n=f,o++}for(var p=s-n;p!==s&&0===h[p];)p++;for(var b=c.repeat(t);p<s;++p)b+=e.charAt(h[p]);return b},decodeUnsafe:u,decode:function(e){var t=u(e);if(t)return t;throw new Error(`Non-${r} character`)}}};class C{constructor(e,r,t){this.name=e,this.prefix=r,this.baseEncode=t}encode(e){if(e instanceof Uint8Array)return`${this.prefix}${this.baseEncode(e)}`;throw Error("Unknown type, must be binary type")}}class E{constructor(e,r,t){if(this.name=e,this.prefix=r,void 0===r.codePointAt(0))throw new Error("Invalid prefix character");this.prefixCodePoint=r.codePointAt(0),this.baseDecode=t}decode(e){if("string"===typeof e){if(e.codePointAt(0)!==this.prefixCodePoint)throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);return this.baseDecode(e.slice(this.prefix.length))}throw Error("Can only multibase decode strings")}or(e){return U(this,e)}}class A{constructor(e){this.decoders=e}or(e){return U(this,e)}decode(e){const r=e[0],t=this.decoders[r];if(t)return t.decode(e);throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`)}}const U=(e,r)=>new A({...e.decoders||{[e.prefix]:e},...r.decoders||{[r.prefix]:r}});class I{constructor(e,r,t,n){this.name=e,this.prefix=r,this.baseEncode=t,this.baseDecode=n,this.encoder=new C(e,r,t),this.decoder=new E(e,r,n)}encode(e){return this.encoder.encode(e)}decode(e){return this.decoder.decode(e)}}const S=({name:e,prefix:r,encode:t,decode:n})=>new I(e,r,t,n),D=({prefix:e,name:r,alphabet:t})=>{const{encode:n,decode:o}=x(t,r);return S({prefix:e,name:r,encode:n,decode:e=>v(o(e))})},z=({name:e,prefix:r,bitsPerChar:t,alphabet:n})=>S({prefix:r,name:e,encode:e=>((e,r,t)=>{const n="="===r[r.length-1],o=(1<<t)-1;let i="",s=0,a=0;for(let c=0;c<e.length;++c)for(a=a<<8|e[c],s+=8;s>t;)s-=t,i+=r[o&a>>s];if(s&&(i+=r[o&a<<t-s]),n)for(;i.length*t&7;)i+="=";return i})(e,n,t),decode:r=>((e,r,t,n)=>{const o={};for(let d=0;d<r.length;++d)o[r[d]]=d;let i=e.length;for(;"="===e[i-1];)--i;const s=new Uint8Array(i*t/8|0);let a=0,c=0,h=0;for(let d=0;d<i;++d){const r=o[e[d]];if(void 0===r)throw new SyntaxError(`Non-${n} character`);c=c<<t|r,a+=t,a>=8&&(a-=8,s[h++]=255&c>>a)}if(a>=t||255&c<<8-a)throw new SyntaxError("Unexpected end of data");return s})(r,n,t,e)}),M=D({name:"base58btc",prefix:"z",alphabet:"123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"}),P=(D({name:"base58flickr",prefix:"Z",alphabet:"123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"}),z({prefix:"b",name:"base32",alphabet:"abcdefghijklmnopqrstuvwxyz234567",bitsPerChar:5})),V=(z({prefix:"B",name:"base32upper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",bitsPerChar:5}),z({prefix:"c",name:"base32pad",alphabet:"abcdefghijklmnopqrstuvwxyz234567=",bitsPerChar:5}),z({prefix:"C",name:"base32padupper",alphabet:"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",bitsPerChar:5}),z({prefix:"v",name:"base32hex",alphabet:"0123456789abcdefghijklmnopqrstuv",bitsPerChar:5}),z({prefix:"V",name:"base32hexupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV",bitsPerChar:5}),z({prefix:"t",name:"base32hexpad",alphabet:"0123456789abcdefghijklmnopqrstuv=",bitsPerChar:5}),z({prefix:"T",name:"base32hexpadupper",alphabet:"0123456789ABCDEFGHIJKLMNOPQRSTUV=",bitsPerChar:5}),z({prefix:"h",name:"base32z",alphabet:"ybndrfg8ejkmcpqxot1uwisza345h769",bitsPerChar:5}),(e,r)=>{const{bytes:t,version:n}=e;return 0===n?T(t,k(e),r||M.encoder):B(t,k(e),r||P.encoder)}),L=new WeakMap,k=e=>{const r=L.get(e);if(null==r){const r=new Map;return L.set(e,r),r}return r};class ${constructor(e,r,t,n){this.code=r,this.version=e,this.multihash=t,this.bytes=n,this["/"]=n}get asCID(){return this}get byteOffset(){return this.bytes.byteOffset}get byteLength(){return this.bytes.byteLength}toV0(){switch(this.version){case 0:return this;case 1:{const{code:e,multihash:r}=this;if(e!==O)throw new Error("Cannot convert a non dag-pb CID to CIDv0");if(r.code!==j)throw new Error("Cannot convert non sha2-256 multihash CID to CIDv0");return $.createV0(r)}default:throw Error(`Can not convert CID version ${this.version} to version 0. This is a bug please report`)}}toV1(){switch(this.version){case 0:{const{code:e,digest:r}=this.multihash,t=((e,r)=>{const t=r.byteLength,n=g(e),o=n+g(t),i=new Uint8Array(o+t);return y(e,i,0),y(t,i,n),i.set(r,o),new m(e,t,r,i)})(e,r);return $.createV1(this.code,t)}case 1:return this;default:throw Error(`Can not convert CID version ${this.version} to version 1. This is a bug please report`)}}equals(e){return $.equals(this,e)}static equals(e,r){const t=r;return t&&e.code===t.code&&e.version===t.version&&((e,r)=>{if(e===r)return!0;{const t=r;return e.code===t.code&&e.size===t.size&&t.bytes instanceof Uint8Array&&((e,r)=>{if(e===r)return!0;if(e.byteLength!==r.byteLength)return!1;for(let t=0;t<e.byteLength;t++)if(e[t]!==r[t])return!1;return!0})(e.bytes,t.bytes)}})(e.multihash,t.multihash)}toString(e){return V(this,e)}toJSON(){return{"/":V(this)}}link(){return this}get[Symbol.toStringTag](){return"CID"}[Symbol.for("nodejs.util.inspect.custom")](){return`CID(${this.toString()})`}static asCID(e){if(null==e)return null;const r=e;if(r instanceof $)return r;if(null!=r["/"]&&r["/"]===r.bytes||r.asCID===r){const{version:e,code:t,multihash:n,bytes:o}=r;return new $(e,t,n,o||q(e,t,n.bytes))}if(!0===r[J]){const{version:e,multihash:t,code:n}=r,o=(e=>{const r=v(e),[t,n]=w(r),[o,i]=w(r.subarray(n)),s=r.subarray(n+i);if(s.byteLength!==o)throw new Error("Incorrect length");return new m(t,o,s,r)})(t);return $.create(e,n,o)}return null}static create(e,r,t){if("number"!==typeof r)throw new Error("String codecs are no longer supported");if(!(t.bytes instanceof Uint8Array))throw new Error("Invalid digest");switch(e){case 0:if(r!==O)throw new Error(`Version 0 CID must use dag-pb (code: ${O}) block encoding`);return new $(e,r,t,t.bytes);case 1:{const n=q(e,r,t.bytes);return new $(e,r,t,n)}default:throw new Error("Invalid version")}}static createV0(e){return $.create(0,O,e)}static createV1(e,r){return $.create(1,e,r)}static decode(e){const[r,t]=$.decodeFirst(e);if(t.length)throw new Error("Incorrect length");return r}static decodeFirst(e){const r=$.inspectBytes(e),t=r.size-r.multihashSize,n=v(e.subarray(t,t+r.multihashSize));if(n.byteLength!==r.multihashSize)throw new Error("Incorrect length");const o=n.subarray(r.multihashSize-r.digestSize),i=new m(r.multihashCode,r.digestSize,o,n);return[0===r.version?$.createV0(i):$.createV1(r.codec,i),e.subarray(r.size)]}static inspectBytes(e){let r=0;const t=()=>{const[t,n]=w(e.subarray(r));return r+=n,t};let n=t(),o=O;if(18===n?(n=0,r=0):o=t(),0!==n&&1!==n)throw new RangeError(`Invalid CID version ${n}`);const i=r,s=t(),a=t(),c=r+a;return{version:n,codec:o,multihashCode:s,digestSize:a,multihashSize:c-i,size:c}}static parse(e,r){const[t,n]=N(e,r),o=$.decode(n);if(0===o.version&&"Q"!==e[0])throw Error("Version 0 CID string must not include multibase prefix");return k(o).set(t,e),o}}const N=(e,r)=>{switch(e[0]){case"Q":{const t=r||M;return[M.prefix,t.decode(`${M.prefix}${e}`)]}case M.prefix:{const t=r||M;return[M.prefix,t.decode(e)]}case P.prefix:{const t=r||P;return[P.prefix,t.decode(e)]}default:if(null==r)throw Error("To parse non base32 or base58btc encoded CID multibase decoder must be provided");return[e[0],r.decode(e)]}},T=(e,r,t)=>{const{prefix:n}=t;if(n!==M.prefix)throw Error(`Cannot string encode V0 in ${t.name} encoding`);const o=r.get(n);if(null==o){const o=t.encode(e).slice(1);return r.set(n,o),o}return o},B=(e,r,t)=>{const{prefix:n}=t,o=r.get(n);if(null==o){const o=t.encode(e);return r.set(n,o),o}return o},O=112,j=18,q=(e,r,t)=>{const n=g(e),o=n+g(r),i=new Uint8Array(o+t.byteLength);return y(e,i,0),y(r,i,n),i.set(t,o),i},J=Symbol.for("@ipld/js-cid/CID")}}]);