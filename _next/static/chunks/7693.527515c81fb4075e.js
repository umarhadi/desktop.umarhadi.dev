"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[7693,7453],{26425:function(e,t,r){r.d(t,{P:function(){return i},w:function(){return n}});const n={0:{name:"Black",rgb:[12,12,12]},1:{name:"Blue",rgb:[0,55,218]},2:{name:"Green",rgb:[19,161,14]},3:{name:"Aqua",rgb:[58,150,221]},4:{name:"Red",rgb:[197,15,31]},5:{name:"Purple",rgb:[136,23,152]},6:{name:"Yellow",rgb:[193,156,0]},7:{name:"White",rgb:[204,204,204]},8:{name:"Gray",rgb:[118,118,118]},9:{name:"Light Blue",rgb:[59,120,255]},A:{name:"Light Green",rgb:[22,198,12]},B:{name:"Light Aqua",rgb:[97,214,214]},C:{name:"Light Red",rgb:[231,72,86]},D:{name:"Light Purple",rgb:[180,0,158]},E:{name:"Light Yellow",rgb:[249,241,165]},F:{name:"Bright White",rgb:[242,242,242]}},i=function(e,t,r){let n=arguments.length>3&&void 0!==arguments[3]&&arguments[3];return`\x1b[${n?"48":"38"};2;${e};${t};${r}m`}},50584:function(e,t,r){r.d(t,{$4:function(){return u},CN:function(){return c},JF:function(){return m},R_:function(){return s},hR:function(){return g},j3:function(){return l},j5:function(){return h},lO:function(){return d},vR:function(){return w},xy:function(){return p}});var n=r(26425),i=r(46567),o=r(86870),a=r(95063);const s=(e,t,r)=>{Object.entries(t).forEach((t=>{let[r,n]=t;e?.println(`${r.padEnd(14)} ${n}`)})),r&&(e?.println("\r\nAliases:\r\n"),Object.entries(r).forEach((r=>{let[n,i]=r;i.forEach((r=>{e?.println(`${r.padEnd(14)} ${t[n]}`)}))})))},c={cd:"Changes the current directory.",clear:"Clears the screen.",color:"Specifies color attribute of console output.",copy:"Copies a file to another location.",date:"Displays the date.",del:"Deletes a file.",dir:"Displays list of entries in current directory.",echo:"Displays messages that are passed to it.",exit:"Quits the command interpreter.",ffmpeg:"Convert audio or video file to another format.",file:"Detects the MIME type of the file.",find:"Searches for a text string in a file or files.",git:"Read from git repositories.",help:"Provides Help information for commands.",history:"Displays command history list.",imagemagick:"Convert an image file to another format.",ipconfig:"Displays current IP.",license:"Displays license.",md:"Creates a directory.",mount:"Mounts a local file system directory.",move:"Moves file or directory.",neofetch:"Displays system information.",pwd:"Prints the working directory.",python:"Run code through Python interpreter.",rd:"Removes a directory.",ren:"Renames a file or directory.",rm:"Removes a file or directory.",sheep:"Spawn a new sheep",shutdown:"Allows proper local shutdown of machine.",taskkill:"Kill or stop a running process or application.",tasklist:"Displays all currently running processes.",time:"Displays the system time.",title:"Sets the window title for the command interpreter.",touch:"Create empty file.",type:"Displays the contents of a file.",uptime:"Display the current uptime of the local system.",ver:"Displays the system version.",wapm:"Run universal Wasm binaries.",weather:"Weather forecast service",whoami:"Displays user information.",xlsx:"Convert a spreadsheet file to another format."},l={cd:["chdir"],clear:["cls"],copy:["cp"],del:["erase"],dir:["ls"],exit:["quit"],find:["search"],git:["isogit"],ipconfig:["ifconfig","whatsmyip"],md:["mkdir"],move:["mv"],neofetch:["systeminfo"],python:["py"],rd:["rmdir"],ren:["rename"],sheep:["esheep"],shutdown:["logout","restart"],taskkill:["kill"],tasklist:["ps"],type:["cat"],ver:["version"],wapm:["wax"],weather:["wttr"]},f=new Set(["cat","cd","chdir","copy","cp","del","dir","erase","ffmpeg","file","imagemagick","ls","md","mkdir","move","python","py","mv","rd","ren","rename","rm","rmdir","touch","type","vim","xlsx"]),p=e=>`'${e}' is not recognized as an internal or external command, operable program or batch file.`,m=(e,t)=>{const{_autocompleteHandlers:r}=t;r.forEach((e=>{let{fn:r}=e;return t.removeAutocompleteHandler(r)})),t.addAutocompleteHandler(((t,r)=>{let[n]=r;if(0===t)return[...Object.keys(c),...e];if(1===t){const t=n.toLowerCase();if("git"===t)return Object.keys(i.C);if(f.has(t))return e;if(Object.keys(o.Z).map((e=>e.toLowerCase())).includes(t))return e}return[]}))},u=e=>{let t=!1,r="";const n=e=>{r&&e.push(r),r=""},i=[...e].reduce(((e,i)=>(" "!==i||t?'"'===i?(t=!t,t||n(e)):r+=i:n(e),e)),[]);return r?[...i,r]:i},h=function(e,t,r,n){let i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"=";if(!n){const t=e.map((e=>{let[t,r]=e;return t.padEnd(r," ")})).join(" "),n=e.map((e=>{let[,t]=e;return i.repeat(t)})).join(" ");r?.println(t),r?.println(n)}const o=t.map((t=>t.map(((r,n)=>{const[,i,o,a]=e[n];let s=n===t.length-1?r:r.slice(0,i);return a&&(s=a(s)),o?s.padStart(i," "):s.padEnd(i," ")})).join(" ")));o.length>0&&o.forEach((e=>r?.println(e)))},d=async()=>{const{quota:e=0,usage:t=0}=await(navigator.storage?.estimate?.())||{};return 0===e?"":`  ${(e-t).toLocaleString()} bytes`},g=function(){let e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];if(window.performance){const[{duration:t}]=window.performance.getEntriesByType("navigation"),r=window.performance.timeOrigin+t,n=Math.ceil(Date.now()-r),i=Math.floor(n/a.y8),o=new Date(n),s=o.getUTCHours(),c=o.getUTCMinutes(),l=o.getUTCSeconds();return[...i?[`${i} day${1===i?"":"s"}`]:[],...s?[`${s} hour${1===s?"":"s"}`]:[],...c?[`${c} ${e?"min":"minute"}${1===c?"":"s"}`]:[],...l?[`${l} ${e?"sec":"second"}${1===l?"":"s"}`]:[]].join(", ")}return"Unknown"},w=(e,t)=>`${(0,n.P)(...n.w[e].rgb,!0)}${(0,n.P)(...n.w[e].rgb)}|||${t?.join("")||`${(0,n.P)(...n.w[0].rgb,!0)}${(0,n.P)(...n.w[7].rgb)}`}`},46567:function(e,t,r){r.d(t,{C:function(){return o}});var n=r(50584),i=r(82296);const o={checkout:"Switch branches or restore working tree files",clone:"Clone a repository into a new directory"};t.Z=async(e,t,a,s,c,l)=>{let[f,...p]=e;const{checkout:m,clone:u,version:h}=await Promise.all([r.e(5157),r.e(6230),r.e(8167)]).then(r.bind(r,45047)),d=[],g=e=>a.println(`remote: ${e.trim()}`),w={fs:s,onProgress:e=>{let{phase:t}=e;d[d.length-1]!==t&&(a.println(t),d.push(t))}};switch(f){case"clone":{const e=await r.e(2969).then(r.bind(r,32969)),[n]=p,o=n?.split("/").pop()?.replace(/\.git$/,""),s=o?(0,i.join)(t,o):t;try{o&&a.println(`Cloning into '${o}'...`),await u({...w,corsProxy:"https://cors.isomorphic-git.org",dir:s,http:e,onMessage:g,url:n})}catch(y){a.println(y.message)}break}case"checkout":if(await c((0,i.join)(t,".git"))){const[e]=p;try{await m({...w,dir:t,force:!0,ref:e}),a.println(`Switched to branch '${e}'`)}catch(y){a.println(y.message)}}else a.println("fatal: not a git repository: .git");break;case"version":a.println(`git version ${h()}.isomorphic-git`);break;default:(0,n.R_)(a,o)}l(t)}},67398:function(e,t,r){var n=r(2832),i=r(45761),o=r(8082),a=r(74479),s=r(15455),c=r(7211),l=r(82296),f=r(50959),p=r(95063),m=r(63270);t.Z=e=>{let{callback:t,directory:r=p.Ll,id:u,onDragLeave:h,onDragOver:d,updatePositions:g}=e;const{url:w}=(0,s.z)(),{iconPositions:y,sortOrders:b,setIconPositions:v}=(0,c.k)(),{mkdirRecursive:$,updateFolder:k,writeFile:D}=(0,a.o)(),C=(0,f.useCallback)((async(e,t,r)=>{if(u)if(t){const n=(0,l.join)(p.Ll,e);await $(p.Ll),await D(n,t,!0)&&(r===o.v.UPDATE_URL&&w(u,n),k(p.Ll,e))}else r===o.v.UPDATE_URL&&w(u,e)}),[u,$,k,w,D]),{openTransferDialog:P}=(0,n.Z)();return{onDragLeave:h,onDragOver:e=>{d?.(e),(0,m.nK)(e)},onDrop:e=>{if(g&&e.target instanceof HTMLElement){const{files:t,text:n}=(0,i.p4)(e);if(0===t.length&&""===n)return;const o={x:e.clientX,y:e.clientY};let a=[];if(n){try{a=JSON.parse(n)}catch{}if(!Array.isArray(a))return;const[e]=a;if(!e)return;if(e.startsWith(r)&&(0,l.basename)(e)===(0,l.relative)(r,e))return;a=a.map((e=>(0,l.basename)(e)))}else a=t instanceof FileList?[...t].map((e=>e.name)):[...t].map((e=>e.getAsFile()?.name||"")).filter(Boolean);a=a.map((e=>{if(!y[`${r}/${e}`])return e;let t=0,n="";do{t+=1,n=`${r}/${(0,l.basename)(e,(0,l.extname)(e))} (${t})${(0,l.extname)(e)}`}while(y[n]);return(0,l.basename)(n)})),(0,m.vi)(r,e.target,y,b,o,a,v)}(0,i.WG)(e,t||C,r,P,Boolean(u))}}}},77453:function(e,t,r){r.r(t),r.d(t,{getIpfsFileName:function(){return c},getIpfsGatewayUrl:function(){return s},getIpfsResource:function(){return l}});var n=r(95063),i=r(55872).Buffer;let o="";const a=e=>new Promise((t=>{const r=window.setTimeout((()=>t(!1)),n.i2),i=new Image;i.addEventListener("load",(()=>{window.clearTimeout(r),t(!0)}),n.K7),i.addEventListener("error",(()=>{window.clearTimeout(r),t(!1)}),n.K7),i.src=`${e.replace("<CID>","bafybeibwzifw52ttrkqlikfzext5akxu7lz4xiwjgwzmqcpdzmp3n5vnbe")}?now=${Date.now()}&filename=1x1.png#x-ipfs-companion-no-redirect`})),s=async(e,t)=>{if(!o||t){const e=t?n.i6.filter((e=>e!==o)):n.i6;for(const t of e)if(await a(t)){o=t;break}if(!o)return""}const{pathname:i,protocol:s,search:c}=new URL(e);if("ipfs:"!==s)return"";const[l="",...f]=i.split("/").filter(Boolean),{CID:p}=await r.e(9335).then(r.bind(r,29335));return`${o.replace("<CID>",p.parse(l).toV1().toString())}${f.join("/")}${c}`},c=async(e,t)=>{const{pathname:n,searchParams:i}=new URL(e),o=i.get("filename");if(o)return o;const{fileTypeFromBuffer:a}=await Promise.all([r.e(5181),r.e(7012),r.e(9778)]).then(r.bind(r,97012)),{ext:s=""}=await a(t)||{};return`${n.split("/").filter(Boolean).join("_")}${s?`.${s}`:""}`},l=async e=>{let t;const r={...n.P8,cache:"no-cache",credentials:"omit",keepalive:!1,mode:"cors",referrerPolicy:"no-referrer",window:null};try{t=await fetch(await s(e),r)}catch(o){"Failed to fetch"===o.message&&(t=await fetch(await s(e,!0),r))}return t instanceof Response?i.from(await t.arrayBuffer()):i.from("")}}}]);